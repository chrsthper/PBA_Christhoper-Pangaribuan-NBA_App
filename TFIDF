{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/chrsthper/PBA_Christhoper-Pangaribuan-NBA_App/blob/main/TFIDF\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "8c953482-bb8c-4da2-b7b7-1a0c4267df9d",
      "metadata": {
        "id": "8c953482-bb8c-4da2-b7b7-1a0c4267df9d"
      },
      "source": [
        "## WEEK 4 tf idf example/ PBA 2025\n",
        "Sentiment Analysis on IMDB dataset\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "6b821098-b0f9-41f7-b0a8-ea1d414229f4",
      "metadata": {
        "id": "6b821098-b0f9-41f7-b0a8-ea1d414229f4"
      },
      "source": [
        "#### Sentiment Analysis on IMDB dataset using different classifiers such as LinearSVM, LogisticRegression, NaiveBayes, XGBoost, RandomForest with different kind of embeddings such as TF-IDF, USE, and TF-IDF+USE"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "1ea8b875-5c15-4c07-a1d4-30c93b6d75a2",
      "metadata": {
        "id": "1ea8b875-5c15-4c07-a1d4-30c93b6d75a2"
      },
      "source": [
        "#### Installing and importing libraries"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "bad7b628-a6ae-401f-aa78-a219dbfe06d2",
      "metadata": {
        "id": "bad7b628-a6ae-401f-aa78-a219dbfe06d2",
        "outputId": "835b4aa7-2ff4-4901-fc43-f9145a964bb3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: nltk in /usr/local/lib/python3.11/dist-packages (3.9.1)\n",
            "Requirement already satisfied: click in /usr/local/lib/python3.11/dist-packages (from nltk) (8.1.8)\n",
            "Requirement already satisfied: joblib in /usr/local/lib/python3.11/dist-packages (from nltk) (1.4.2)\n",
            "Requirement already satisfied: regex>=2021.8.3 in /usr/local/lib/python3.11/dist-packages (from nltk) (2024.11.6)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from nltk) (4.67.1)\n"
          ]
        }
      ],
      "source": [
        "pip install -U nltk"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "99045f64-0402-474e-906f-46c096be3a15",
      "metadata": {
        "scrolled": true,
        "id": "99045f64-0402-474e-906f-46c096be3a15"
      },
      "outputs": [],
      "source": [
        "#pip install tensorflow"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a6268605-9bf0-4376-a507-f2a99823c920",
      "metadata": {
        "id": "a6268605-9bf0-4376-a507-f2a99823c920",
        "outputId": "bf39cc60-6fbc-453e-c7a2-c006fa22d230",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: tensorflow_hub in /usr/local/lib/python3.11/dist-packages (0.16.1)\n",
            "Requirement already satisfied: numpy>=1.12.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow_hub) (2.0.2)\n",
            "Requirement already satisfied: protobuf>=3.19.6 in /usr/local/lib/python3.11/dist-packages (from tensorflow_hub) (5.29.4)\n",
            "Requirement already satisfied: tf-keras>=2.14.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow_hub) (2.18.0)\n",
            "Requirement already satisfied: tensorflow<2.19,>=2.18 in /usr/local/lib/python3.11/dist-packages (from tf-keras>=2.14.1->tensorflow_hub) (2.18.0)\n",
            "Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow<2.19,>=2.18->tf-keras>=2.14.1->tensorflow_hub) (1.4.0)\n",
            "Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow<2.19,>=2.18->tf-keras>=2.14.1->tensorflow_hub) (1.6.3)\n",
            "Requirement already satisfied: flatbuffers>=24.3.25 in /usr/local/lib/python3.11/dist-packages (from tensorflow<2.19,>=2.18->tf-keras>=2.14.1->tensorflow_hub) (25.2.10)\n",
            "Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow<2.19,>=2.18->tf-keras>=2.14.1->tensorflow_hub) (0.6.0)\n",
            "Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow<2.19,>=2.18->tf-keras>=2.14.1->tensorflow_hub) (0.2.0)\n",
            "Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow<2.19,>=2.18->tf-keras>=2.14.1->tensorflow_hub) (18.1.1)\n",
            "Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.11/dist-packages (from tensorflow<2.19,>=2.18->tf-keras>=2.14.1->tensorflow_hub) (3.4.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from tensorflow<2.19,>=2.18->tf-keras>=2.14.1->tensorflow_hub) (24.2)\n",
            "Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow<2.19,>=2.18->tf-keras>=2.14.1->tensorflow_hub) (2.32.3)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.11/dist-packages (from tensorflow<2.19,>=2.18->tf-keras>=2.14.1->tensorflow_hub) (75.1.0)\n",
            "Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow<2.19,>=2.18->tf-keras>=2.14.1->tensorflow_hub) (1.17.0)\n",
            "Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow<2.19,>=2.18->tf-keras>=2.14.1->tensorflow_hub) (2.5.0)\n",
            "Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.11/dist-packages (from tensorflow<2.19,>=2.18->tf-keras>=2.14.1->tensorflow_hub) (4.12.2)\n",
            "Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow<2.19,>=2.18->tf-keras>=2.14.1->tensorflow_hub) (1.17.2)\n",
            "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.11/dist-packages (from tensorflow<2.19,>=2.18->tf-keras>=2.14.1->tensorflow_hub) (1.71.0)\n",
            "Requirement already satisfied: tensorboard<2.19,>=2.18 in /usr/local/lib/python3.11/dist-packages (from tensorflow<2.19,>=2.18->tf-keras>=2.14.1->tensorflow_hub) (2.18.0)\n",
            "Requirement already satisfied: keras>=3.5.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow<2.19,>=2.18->tf-keras>=2.14.1->tensorflow_hub) (3.8.0)\n",
            "Requirement already satisfied: h5py>=3.11.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow<2.19,>=2.18->tf-keras>=2.14.1->tensorflow_hub) (3.13.0)\n",
            "Requirement already satisfied: ml-dtypes<0.5.0,>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow<2.19,>=2.18->tf-keras>=2.14.1->tensorflow_hub) (0.4.1)\n",
            "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow<2.19,>=2.18->tf-keras>=2.14.1->tensorflow_hub) (0.37.1)\n",
            "Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from astunparse>=1.6.0->tensorflow<2.19,>=2.18->tf-keras>=2.14.1->tensorflow_hub) (0.45.1)\n",
            "Requirement already satisfied: rich in /usr/local/lib/python3.11/dist-packages (from keras>=3.5.0->tensorflow<2.19,>=2.18->tf-keras>=2.14.1->tensorflow_hub) (13.9.4)\n",
            "Requirement already satisfied: namex in /usr/local/lib/python3.11/dist-packages (from keras>=3.5.0->tensorflow<2.19,>=2.18->tf-keras>=2.14.1->tensorflow_hub) (0.0.8)\n",
            "Requirement already satisfied: optree in /usr/local/lib/python3.11/dist-packages (from keras>=3.5.0->tensorflow<2.19,>=2.18->tf-keras>=2.14.1->tensorflow_hub) (0.14.1)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow<2.19,>=2.18->tf-keras>=2.14.1->tensorflow_hub) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow<2.19,>=2.18->tf-keras>=2.14.1->tensorflow_hub) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow<2.19,>=2.18->tf-keras>=2.14.1->tensorflow_hub) (2.3.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow<2.19,>=2.18->tf-keras>=2.14.1->tensorflow_hub) (2025.1.31)\n",
            "Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.19,>=2.18->tensorflow<2.19,>=2.18->tf-keras>=2.14.1->tensorflow_hub) (3.7)\n",
            "Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.19,>=2.18->tensorflow<2.19,>=2.18->tf-keras>=2.14.1->tensorflow_hub) (0.7.2)\n",
            "Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.19,>=2.18->tensorflow<2.19,>=2.18->tf-keras>=2.14.1->tensorflow_hub) (3.1.3)\n",
            "Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.11/dist-packages (from werkzeug>=1.0.1->tensorboard<2.19,>=2.18->tensorflow<2.19,>=2.18->tf-keras>=2.14.1->tensorflow_hub) (3.0.2)\n",
            "Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.11/dist-packages (from rich->keras>=3.5.0->tensorflow<2.19,>=2.18->tf-keras>=2.14.1->tensorflow_hub) (3.0.0)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.11/dist-packages (from rich->keras>=3.5.0->tensorflow<2.19,>=2.18->tf-keras>=2.14.1->tensorflow_hub) (2.18.0)\n",
            "Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.11/dist-packages (from markdown-it-py>=2.2.0->rich->keras>=3.5.0->tensorflow<2.19,>=2.18->tf-keras>=2.14.1->tensorflow_hub) (0.1.2)\n"
          ]
        }
      ],
      "source": [
        "pip install tensorflow_hub"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9a441501-bbe7-4632-8fe8-fb03db387692",
      "metadata": {
        "scrolled": true,
        "id": "9a441501-bbe7-4632-8fe8-fb03db387692"
      },
      "outputs": [],
      "source": [
        "#pip install torch"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a8c66c42-31d6-48a3-94e1-3106d79e7daa",
      "metadata": {
        "scrolled": true,
        "id": "a8c66c42-31d6-48a3-94e1-3106d79e7daa"
      },
      "outputs": [],
      "source": [
        "#pip install xgboost"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "132e1e9e-c3da-43c8-90fe-3bd93595ad70",
      "metadata": {
        "id": "132e1e9e-c3da-43c8-90fe-3bd93595ad70"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import nltk\n",
        "import re\n",
        "import torch\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.tokenize import word_tokenize\n",
        "import tensorflow as tf\n",
        "import tensorflow_hub as hub\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "661c78ad-de7e-4ac8-9127-67409326149d",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "661c78ad-de7e-4ac8-9127-67409326149d",
        "outputId": "de8a4d51-339f-4eaa-e9aa-684b2f79b698"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/stopwords.zip.\n",
            "[nltk_data] Downloading package words to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/words.zip.\n",
            "[nltk_data] Downloading package wordnet to /root/nltk_data...\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "nltk.download('stopwords')\n",
        "nltk.download('words')\n",
        "nltk.download('wordnet')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "55589dba-2bd9-465e-a9a6-37d5d7cfa854",
      "metadata": {
        "id": "55589dba-2bd9-465e-a9a6-37d5d7cfa854",
        "outputId": "482c17ac-5712-4ca4-f7ad-fa59841a5f60",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Unzipping tokenizers/punkt.zip.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ],
      "source": [
        "nltk.download('punkt')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2fcdf9d5-9ae8-4c82-9d62-d748fe137af7",
      "metadata": {
        "id": "2fcdf9d5-9ae8-4c82-9d62-d748fe137af7"
      },
      "outputs": [],
      "source": [
        "stop_words = set(stopwords.words('english'))"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "7c7f35bc-061d-483b-95fe-a02326ae4f04",
      "metadata": {
        "id": "7c7f35bc-061d-483b-95fe-a02326ae4f04"
      },
      "source": [
        "#### To check is there any GPU available or not"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "cc78859d-0d55-4604-9762-97a9560676b4",
      "metadata": {
        "id": "cc78859d-0d55-4604-9762-97a9560676b4",
        "outputId": "c3fef799-71f4-464a-ece3-cf0c33460dfc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "GPU not available, CPU used\n"
          ]
        }
      ],
      "source": [
        "is_cuda = torch.cuda.is_available()\n",
        "\n",
        "# If we have a GPU available, we'll set our device to GPU.\n",
        "if is_cuda:\n",
        "    device = torch.device(\"cuda\")\n",
        "    print(\"GPU is available\")\n",
        "else:\n",
        "    device = torch.device(\"cpu\")\n",
        "    print(\"GPU not available, CPU used\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e875605b-c98f-482f-9d71-7e3b7f4075e6",
      "metadata": {
        "id": "e875605b-c98f-482f-9d71-7e3b7f4075e6"
      },
      "source": [
        "#### Load the IMDB dataset for sentiment analysis between positive and negative reviews"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c57b4ef4-0067-4215-8642-2f82d98c8f76",
      "metadata": {
        "id": "c57b4ef4-0067-4215-8642-2f82d98c8f76",
        "outputId": "507a2325-299c-4c17-d258-26ab6c589f61",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                                 content sentiment_rating\n",
            "0      this app won't allow you to unsubscribe in you...         Negative\n",
            "1      great app! great support team! the new multi v...         Positive\n",
            "2      this app is terrible at streaming anywhere oth...         Negative\n",
            "3      don't like nba nor sports ony here to get 10 p...          Neutral\n",
            "4                                              great app         Positive\n",
            "...                                                  ...              ...\n",
            "18641  video is awesome, but unable to log in as only...         Positive\n",
            "18642  downloaded the app onto my huawei 7-inch table...          Neutral\n",
            "18643  i've purchased league pass / nba.tv already an...         Negative\n",
            "18644                can't wait for the season to start!         Positive\n",
            "18645                                       finally here         Positive\n",
            "\n",
            "[18646 rows x 2 columns]\n"
          ]
        }
      ],
      "source": [
        "df = pd.read_csv('/content/nba_reviews_data_done.csv')\n",
        "df = df.sample(frac=1).reset_index(drop=True)\n",
        "df"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e8f40f61-c36a-4271-b8a0-9f99dcf3702e",
      "metadata": {
        "id": "e8f40f61-c36a-4271-b8a0-9f99dcf3702e"
      },
      "source": [
        "#### Exploratory Data Analysis for IMDB dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d59fa748-8d70-4ccb-bb29-581fb35f3b09",
      "metadata": {
        "id": "d59fa748-8d70-4ccb-bb29-581fb35f3b09"
      },
      "outputs": [],
      "source": [
        "class EDA():\n",
        "    def get_length_dist(self,data):\n",
        "        rev_len = [len(i) for i in data]\n",
        "        pd.Series(rev_len).hist()\n",
        "        plt.title('Number of types of commets')\n",
        "        plt.xlabel('length')\n",
        "        plt.ylabel('number')\n",
        "        plt.show()\n",
        "        print(pd.Series(rev_len).describe())\n",
        "    def get_class_dist(self,df):\n",
        "        # Check if 'sentiment_rating' column exists\n",
        "        column_name = 'sentiment_rating'\n",
        "        if column_name not in df.columns:\n",
        "            raise KeyError(f\"Column '{column_name}' not found in the DataFrame.\")\n",
        "\n",
        "        df[column_name].replace({1:'positive',0:'negative'}).value_counts().plot(kind='bar',figsize=(7,4))\n",
        "        plt.title('Number of types')\n",
        "        plt.xlabel('Comment_type')\n",
        "        plt.ylabel('number')\n",
        "        plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a927cbb0-0817-4d3d-befc-e15d4bf2d3f7",
      "metadata": {
        "id": "a927cbb0-0817-4d3d-befc-e15d4bf2d3f7",
        "outputId": "2c9fba2f-a65b-4d29-8ac4-e46b4a686cd1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "count    18646.000000\n",
            "mean       129.391773\n",
            "std        131.257014\n",
            "min          1.000000\n",
            "25%         34.000000\n",
            "50%         84.000000\n",
            "75%        179.000000\n",
            "max       2302.000000\n",
            "dtype: float64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 700x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "eda = EDA()\n",
        "eda.get_length_dist(df['content'])\n",
        "eda.get_class_dist(df)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "900a5886-128f-4842-87e7-f4de8d03bf00",
      "metadata": {
        "id": "900a5886-128f-4842-87e7-f4de8d03bf00"
      },
      "source": [
        "#### Preprocess the data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3c67072b-b6bb-462f-9c2b-e83171f30dd2",
      "metadata": {
        "id": "3c67072b-b6bb-462f-9c2b-e83171f30dd2"
      },
      "outputs": [],
      "source": [
        "def preprocess_text(text):\n",
        "    # Remove HTML tags and strip whitespace\n",
        "    text = re.sub(r'<[^>]*>', '', text)\n",
        "    text = text.strip()\n",
        "    # Remove noisy characters and extra spaces\n",
        "    text = re.sub(r'[^\\w\\s]', '', text)\n",
        "    text = re.sub(r'\\s+', ' ', text)\n",
        "    # Lowercase text\n",
        "    text = text.lower()\n",
        "    # Tokenize text and remove stopwords\n",
        "    words = word_tokenize(text)\n",
        "    words = [word for word in words if word not in stop_words]\n",
        "    return ' '.join(words)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "fd909202-894f-4f81-8142-e3cc03a88c4f",
      "metadata": {
        "id": "fd909202-894f-4f81-8142-e3cc03a88c4f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "00d07bc7-d13d-4157-aac1-07627651e2f6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package punkt_tab to /root/nltk_data...\n",
            "[nltk_data]   Unzipping tokenizers/punkt_tab.zip.\n"
          ]
        }
      ],
      "source": [
        "import nltk\n",
        "nltk.download('punkt_tab')\n",
        "df['content'] = df['content'].apply(preprocess_text)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "37329de7-7f7f-44a8-82f7-9b7f9b43fc1a",
      "metadata": {
        "id": "37329de7-7f7f-44a8-82f7-9b7f9b43fc1a",
        "outputId": "db0d93f3-fa32-4ac0-f3d5-17b945b9203c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 711
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0     app wont allow unsubscribe league pass always ...\n",
              "1     great app great support team new multi view fe...\n",
              "2     app terrible streaming anywhere app goes strea...\n",
              "3                dont like nba sports ony get 10 points\n",
              "4                                             great app\n",
              "5     kinda reminds trying play cd roading back day ...\n",
              "6     never got chance really play games sure app sorry\n",
              "7     unable see live blank screen breaks timeout ne...\n",
              "8     nba league app frustratingly flawed despite pa...\n",
              "9     excellent except reason unable pickem says got...\n",
              "10    since nba made worst move ever allowing micros...\n",
              "11    app okchromecast little laggy rest fine real b...\n",
              "12                doesnt lag app works fine watch games\n",
              "13     like made like ms hs language makes entertaining\n",
              "14    app awesome especially comes fact watch highli...\n",
              "15                   frustrating keeps logging randomly\n",
              "16    turned notifications app try stop awful moment...\n",
              "17          amazing experience downside pay watch games\n",
              "18                                            watch nba\n",
              "19      nice like better free nba league pass app thank\n",
              "Name: content, dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>content</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>app wont allow unsubscribe league pass always ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>great app great support team new multi view fe...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>app terrible streaming anywhere app goes strea...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>dont like nba sports ony get 10 points</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>great app</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>kinda reminds trying play cd roading back day ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>never got chance really play games sure app sorry</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>unable see live blank screen breaks timeout ne...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>nba league app frustratingly flawed despite pa...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>excellent except reason unable pickem says got...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>since nba made worst move ever allowing micros...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>app okchromecast little laggy rest fine real b...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>doesnt lag app works fine watch games</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>like made like ms hs language makes entertaining</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>app awesome especially comes fact watch highli...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>frustrating keeps logging randomly</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>turned notifications app try stop awful moment...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>amazing experience downside pay watch games</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>watch nba</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>nice like better free nba league pass app thank</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ],
      "source": [
        "df['content'].head(20)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e37091ce-31c6-4dd8-9988-9ee7cc4d35d5",
      "metadata": {
        "id": "e37091ce-31c6-4dd8-9988-9ee7cc4d35d5"
      },
      "source": [
        "#### Split x=feature, y=target"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "fe61434a-ea20-4118-a54d-c790eb52fef7",
      "metadata": {
        "id": "fe61434a-ea20-4118-a54d-c790eb52fef7"
      },
      "outputs": [],
      "source": [
        "x = df['content']\n",
        "y = df['sentiment_rating']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d4cd09c0-990a-4fe8-8ef5-d1955359fa4d",
      "metadata": {
        "id": "d4cd09c0-990a-4fe8-8ef5-d1955359fa4d",
        "outputId": "414ab3f2-9778-4070-a352-7d00693d131d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 2, 0, ..., 0, 2, 2])"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ],
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "label_encode = LabelEncoder()\n",
        "Y = label_encode.fit_transform(df['sentiment_rating'])\n",
        "Y"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a8282f62-b148-47fa-b886-c50a3e120a78",
      "metadata": {
        "id": "a8282f62-b148-47fa-b886-c50a3e120a78",
        "outputId": "01862c8c-e412-4a29-e430-efff52212d2e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0        Negative\n",
              "1        Positive\n",
              "2        Negative\n",
              "3         Neutral\n",
              "4        Positive\n",
              "           ...   \n",
              "18641    Positive\n",
              "18642     Neutral\n",
              "18643    Negative\n",
              "18644    Positive\n",
              "18645    Positive\n",
              "Name: sentiment_rating, Length: 18646, dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sentiment_rating</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Neutral</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18641</th>\n",
              "      <td>Positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18642</th>\n",
              "      <td>Neutral</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18643</th>\n",
              "      <td>Negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18644</th>\n",
              "      <td>Positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18645</th>\n",
              "      <td>Positive</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>18646 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ],
      "source": [
        "y"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "58088824-cefd-468d-8e3f-ddd38bbd7b33",
      "metadata": {
        "id": "58088824-cefd-468d-8e3f-ddd38bbd7b33"
      },
      "source": [
        "### Note: 0 represent negative comments and 1 represent positive comments"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "5ec5f3ed-6769-4564-93c2-4dc5bea126ee",
      "metadata": {
        "id": "5ec5f3ed-6769-4564-93c2-4dc5bea126ee"
      },
      "source": [
        "### Split the dataset into training and testing sets\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b1088cf9-4cf8-4f6c-8bdd-f9d22b6f95f0",
      "metadata": {
        "id": "b1088cf9-4cf8-4f6c-8bdd-f9d22b6f95f0"
      },
      "outputs": [],
      "source": [
        "xtrain, xtest, ytrain, ytest = train_test_split(x, Y, test_size=0.2, random_state=42)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "cf3d9a30-fba2-45f1-9e3b-94b57a2fed23",
      "metadata": {
        "id": "cf3d9a30-fba2-45f1-9e3b-94b57a2fed23"
      },
      "source": [
        "### Create a vocabulary"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c3c951f4-ff12-4331-af67-f2bce9b2369a",
      "metadata": {
        "id": "c3c951f4-ff12-4331-af67-f2bce9b2369a"
      },
      "outputs": [],
      "source": [
        "# Create a vocabulary\n",
        "from collections import Counter\n",
        "word_counts = Counter(' '.join(xtrain).split())"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "61000921-59d8-4044-87b5-f86f3d72e476",
      "metadata": {
        "id": "61000921-59d8-4044-87b5-f86f3d72e476"
      },
      "source": [
        "### Display each word in the vocabulary along with its count\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "75ac5f0d-5a6a-4b74-aad2-5d17d022b4a0",
      "metadata": {
        "scrolled": true,
        "id": "75ac5f0d-5a6a-4b74-aad2-5d17d022b4a0"
      },
      "outputs": [],
      "source": [
        "#for word, count in word_counts.items():\n",
        "    #print(f\"{word}: {count}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "10096e11-e063-4789-b962-28a971fb2f3a",
      "metadata": {
        "scrolled": true,
        "id": "10096e11-e063-4789-b962-28a971fb2f3a"
      },
      "outputs": [],
      "source": [
        "#vocab = [word for word, count in word_counts.most_common()]\n",
        "#vocab"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "7ce2e3c5-7eb9-4a50-a843-0eb8bd6ff860",
      "metadata": {
        "id": "7ce2e3c5-7eb9-4a50-a843-0eb8bd6ff860"
      },
      "source": [
        "### Classification with various classifiers\n",
        "#### 1. Linear SVM\n",
        "#### 2. Logistic Regression (LR)\n",
        "#### 3. Naive Bayes\n",
        "#### 4. XGBoost\n",
        "#### 5. Random Forest"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "aac74f4c-e88b-4ecb-bdec-a7e418a26e59",
      "metadata": {
        "id": "aac74f4c-e88b-4ecb-bdec-a7e418a26e59"
      },
      "outputs": [],
      "source": [
        "#Import libraries\n",
        "from sklearn.svm import LinearSVC\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.naive_bayes import MultinomialNB\n",
        "from xgboost import XGBClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report, confusion_matrix\n",
        "from timeit import default_timer as timer"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "9e3f9410-a5ac-4cc0-9079-b1151b6f4e3b",
      "metadata": {
        "id": "9e3f9410-a5ac-4cc0-9079-b1151b6f4e3b"
      },
      "source": [
        "#### Initialize classifiers"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f86d8c8b-431c-488b-ad0c-b45b87147668",
      "metadata": {
        "id": "f86d8c8b-431c-488b-ad0c-b45b87147668"
      },
      "outputs": [],
      "source": [
        "svm_classifier = LinearSVC()\n",
        "logistic_regression = LogisticRegression(max_iter=1000)\n",
        "nb_classifier = MultinomialNB()\n",
        "xgboost_classifier = XGBClassifier()\n",
        "random_forest_classifier = RandomForestClassifier(n_estimators=100, max_depth=3, max_features='sqrt', min_samples_leaf=4, bootstrap=True, n_jobs=-1, random_state=0)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7e22042f-47bd-4584-aa4a-b6e27c0ff946",
      "metadata": {
        "id": "7e22042f-47bd-4584-aa4a-b6e27c0ff946"
      },
      "outputs": [],
      "source": [
        "def evaluate_model(model, xtest, ytest):\n",
        "    # Make predictions using the model\n",
        "    y_pred = model.predict(xtest)\n",
        "\n",
        "    # Calculate accuracy\n",
        "    accuracy = accuracy_score(ytest, y_pred)\n",
        "    # Calculate precision\n",
        "    precision = precision_score(ytest, y_pred, average='weighted')\n",
        "    # Calculate recall\n",
        "    recall = recall_score(ytest, y_pred, average='weighted')\n",
        "    # Calculate f1 score\n",
        "    f1 = f1_score(ytest, y_pred, average='weighted')\n",
        "    # Generate a classification report and confusion matrix\n",
        "    report = classification_report(ytest, y_pred)\n",
        "    cm = confusion_matrix(ytest, y_pred)\n",
        "    return y_pred, accuracy, precision, recall, f1, report, cm\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "5c560565-5c90-449c-a93e-941939bfa5f8",
      "metadata": {
        "id": "5c560565-5c90-449c-a93e-941939bfa5f8"
      },
      "outputs": [],
      "source": [
        "# Define batch size\n",
        "batch_size = 1000"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "9a54a355-1c98-44e9-9fb5-14d99b480013",
      "metadata": {
        "id": "9a54a355-1c98-44e9-9fb5-14d99b480013"
      },
      "source": [
        "## 1. TF-IDF"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "a2f7b368-860d-4cb2-9e9b-a28b457f9a81",
      "metadata": {
        "id": "a2f7b368-860d-4cb2-9e9b-a28b457f9a81"
      },
      "source": [
        "#### TF-IDF Vectorization\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "68886848-7170-403c-b6a3-9e10698cdfc3",
      "metadata": {
        "id": "68886848-7170-403c-b6a3-9e10698cdfc3"
      },
      "outputs": [],
      "source": [
        "tfidf_vectorizer = TfidfVectorizer(max_features=5000)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "313399cb-be7e-4722-9dd7-9c51610cd49a",
      "metadata": {
        "id": "313399cb-be7e-4722-9dd7-9c51610cd49a"
      },
      "source": [
        "##### Process the data in smaller batches for training data\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "85ff4a92-7d3d-4c92-a783-223569d7b59a",
      "metadata": {
        "id": "85ff4a92-7d3d-4c92-a783-223569d7b59a",
        "outputId": "e46f63b5-9f85-4807-b8e7-7b2c2602dfaf",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Required time for embedding TFIDF with train data:-  0.7650385889999143\n"
          ]
        }
      ],
      "source": [
        "start = timer()\n",
        "tfidf_vectorizer_xtrain = []\n",
        "for i in range(0, len(xtrain), batch_size):\n",
        "    batch_X_train = xtrain[i:i + batch_size]\n",
        "    batch_X_train_tfidf = tfidf_vectorizer.fit_transform(batch_X_train)\n",
        "    tfidf_vectorizer_xtrain.extend(batch_X_train_tfidf.toarray())\n",
        "print('Required time for embedding TFIDF with train data:- ', timer() - start)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "09d50079-1a1b-4ca7-9ce2-9d0e4aef005c",
      "metadata": {
        "id": "09d50079-1a1b-4ca7-9ce2-9d0e4aef005c"
      },
      "source": [
        "##### Repeat the same process for test data\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9a6335d3-4dbc-4d10-b10b-ba51a5820299",
      "metadata": {
        "id": "9a6335d3-4dbc-4d10-b10b-ba51a5820299",
        "outputId": "7a152e68-eb45-4993-87a6-45ebaa9e3407",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Required time for embedding TFIDF with train data:-  0.23643278200006534\n"
          ]
        }
      ],
      "source": [
        "start = timer()\n",
        "tfidf_vectorizer_xtrain = tfidf_vectorizer.fit_transform(xtrain) # Fit and transform on the entire training data at once\n",
        "#tfidf_vectorizer_xtrain = []\n",
        "#for i in range(0, len(xtrain), batch_size):\n",
        "#    batch_X_train = xtrain[i:i + batch_size]\n",
        "#    batch_X_train_tfidf = tfidf_vectorizer.fit_transform(batch_X_train)\n",
        "#    tfidf_vectorizer_xtrain.extend(batch_X_train_tfidf.toarray())\n",
        "print('Required time for embedding TFIDF with train data:- ', timer() - start)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "73973d6b-43fe-4285-88a3-b3d8857f039d",
      "metadata": {
        "id": "73973d6b-43fe-4285-88a3-b3d8857f039d"
      },
      "source": [
        "#### Fit classifiers"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "39f1f2f6-456f-4701-a979-bbf536e39113",
      "metadata": {
        "id": "39f1f2f6-456f-4701-a979-bbf536e39113",
        "outputId": "4aa673c7-d1bd-4262-ccbc-9faf81e5f5be",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Required time for training Linear SVM classifiers:-  0.45431134499995096\n",
            "Required time for training Logistic Regression classifiers:-  1.6045490970000174\n",
            "Required time for training Naive Bayes classifiers:-  0.006736310999940542\n",
            "Required time for training XGBoost classifiers:-  28.011622763999867\n",
            "Required time for training all five classifiers:-  0.7616069919999973\n"
          ]
        }
      ],
      "source": [
        "start = timer()\n",
        "svm_tfidf = svm_classifier.fit(tfidf_vectorizer_xtrain, ytrain)\n",
        "print('Required time for training Linear SVM classifiers:- ', timer() - start)\n",
        "start = timer()\n",
        "lr_tfidf = logistic_regression.fit(tfidf_vectorizer_xtrain, ytrain)\n",
        "print('Required time for training Logistic Regression classifiers:- ', timer() - start)\n",
        "start = timer()\n",
        "nb_tfidf = nb_classifier.fit(tfidf_vectorizer_xtrain, ytrain)\n",
        "print('Required time for training Naive Bayes classifiers:- ', timer() - start)\n",
        "start = timer()\n",
        "xgboost_tfidf = xgboost_classifier.fit(tfidf_vectorizer_xtrain, ytrain)\n",
        "print('Required time for training XGBoost classifiers:- ', timer() - start)\n",
        "start = timer()\n",
        "rfc_tfidf = random_forest_classifier.fit(tfidf_vectorizer_xtrain, ytrain)\n",
        "print('Required time for training all five classifiers:- ', timer() - start)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "d08018d7-fcdd-4bc3-a65f-0d96c7ce649b",
      "metadata": {
        "id": "d08018d7-fcdd-4bc3-a65f-0d96c7ce649b"
      },
      "source": [
        "#### Make predictions"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "c9193725-8df2-463e-b537-319098fac30f",
      "metadata": {
        "id": "c9193725-8df2-463e-b537-319098fac30f"
      },
      "source": [
        "### Linear SVM"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "72c2a99e-dd40-4abe-a8bd-0ba2db197611",
      "metadata": {
        "id": "72c2a99e-dd40-4abe-a8bd-0ba2db197611",
        "outputId": "257e2494-5138-4984-9771-1f2ba158c393",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Required time for SVM prediction:-  0.1273306450000291\n"
          ]
        }
      ],
      "source": [
        "start = timer()\n",
        "tfidf_vectorizer_xtest = tfidf_vectorizer.transform(xtest) # Transform the test data using the same fitted TF-IDF vectorizer\n",
        "y_pred_svm, accuracy_svm, precision_svm, recall_svm, f1_svm, report_svm, confusion_matrix_svm = evaluate_model(svm_tfidf, tfidf_vectorizer_xtest, ytest)\n",
        "print('Required time for SVM prediction:- ', timer() - start)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "c586812c-6fe9-48ba-9ad8-620e046ec079",
      "metadata": {
        "id": "c586812c-6fe9-48ba-9ad8-620e046ec079"
      },
      "source": [
        "#### Print actual vs. predicted results for LinearSVM"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b6e3df3f-9612-49e9-871b-787decfbc83b",
      "metadata": {
        "id": "b6e3df3f-9612-49e9-871b-787decfbc83b",
        "outputId": "685b4860-91e4-441b-acc8-17d368daf4fb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0 = negative, 1 = positive\n",
            "Actual: 0, SVM Predicted: 0\n",
            "\n",
            "Actual: 0, SVM Predicted: 0\n",
            "\n",
            "Actual: 2, SVM Predicted: 2\n",
            "\n",
            "Actual: 0, SVM Predicted: 0\n",
            "\n",
            "Actual: 1, SVM Predicted: 0\n",
            "\n",
            "Actual: 0, SVM Predicted: 0\n",
            "\n",
            "Actual: 0, SVM Predicted: 0\n",
            "\n",
            "Actual: 0, SVM Predicted: 0\n",
            "\n",
            "Actual: 0, SVM Predicted: 0\n",
            "\n",
            "Actual: 2, SVM Predicted: 2\n",
            "\n",
            "Actual: 0, SVM Predicted: 0\n",
            "\n",
            "Actual: 0, SVM Predicted: 0\n",
            "\n",
            "Actual: 0, SVM Predicted: 0\n",
            "\n",
            "Actual: 0, SVM Predicted: 0\n",
            "\n",
            "Actual: 1, SVM Predicted: 0\n",
            "\n"
          ]
        }
      ],
      "source": [
        "print('0 = negative, 1 = positive')\n",
        "for actual, predicted in zip(ytest[:15], y_pred_svm[:15]):\n",
        "    print(f\"Actual: {actual}, SVM Predicted: {predicted}\")\n",
        "    print()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "cb35628b-3cbe-46f2-bd43-073975b3ec90",
      "metadata": {
        "id": "cb35628b-3cbe-46f2-bd43-073975b3ec90",
        "outputId": "c1dc70ef-b302-4c27-953d-23a7ac304a20",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "LinearSVM Accuracy: 0.83\n",
            "LinearSVM Precision: 0.80\n",
            "LinearSVM Recall: 0.83\n",
            "LinearSVM F1 score: 0.81\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.83      0.93      0.88      2154\n",
            "           1       0.39      0.05      0.10       294\n",
            "           2       0.84      0.84      0.84      1282\n",
            "\n",
            "    accuracy                           0.83      3730\n",
            "   macro avg       0.69      0.61      0.61      3730\n",
            "weighted avg       0.80      0.83      0.81      3730\n",
            "\n",
            "Confusion Matrix\n",
            "[[2011   11  132]\n",
            " [ 211   16   67]\n",
            " [ 189   14 1079]]\n"
          ]
        }
      ],
      "source": [
        "print(f\"LinearSVM Accuracy: {accuracy_svm:.2f}\")\n",
        "print(f\"LinearSVM Precision: {precision_svm:.2f}\")\n",
        "print(f\"LinearSVM Recall: {recall_svm:.2f}\")\n",
        "print(f\"LinearSVM F1 score: {f1_svm:.2f}\")\n",
        "print(\"Classification Report:\")\n",
        "print(report_svm)\n",
        "print(\"Confusion Matrix\")\n",
        "print(confusion_matrix_svm)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e1ffb984-5f8b-48b5-94ca-63781a24a87c",
      "metadata": {
        "id": "e1ffb984-5f8b-48b5-94ca-63781a24a87c"
      },
      "source": [
        "### Logistic Regression"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "23169f4f-6f05-42cd-8c13-c3bcdea52d65",
      "metadata": {
        "id": "23169f4f-6f05-42cd-8c13-c3bcdea52d65",
        "outputId": "40f013b4-6a0d-42eb-f063-ff2d8dbbdaaa",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Required time for Logistic Regression prediction:-  0.021526868999899307\n"
          ]
        }
      ],
      "source": [
        "start = timer()\n",
        "y_pred_lr, accuracy_lr, precision_lr, recall_lr, f1_lr, report_lr, cm_lr = evaluate_model(lr_tfidf, tfidf_vectorizer_xtest, ytest)\n",
        "print('Required time for Logistic Regression prediction:- ', timer() - start)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "285a2cc2-0776-42bf-82cb-c1e39e80cd28",
      "metadata": {
        "id": "285a2cc2-0776-42bf-82cb-c1e39e80cd28"
      },
      "source": [
        "#### Print actual vs. predicted results for Logistic Regression\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "067b3d31-1352-4115-a807-cdfe4ce6f54a",
      "metadata": {
        "id": "067b3d31-1352-4115-a807-cdfe4ce6f54a",
        "outputId": "9e95b795-f228-47d1-cb14-54a3ac8064e0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0 = negative, 1 = positive\n",
            "Actual: 0, Logistic Regression Predicted: 0\n",
            "\n",
            "Actual: 0, Logistic Regression Predicted: 0\n",
            "\n",
            "Actual: 2, Logistic Regression Predicted: 2\n",
            "\n",
            "Actual: 0, Logistic Regression Predicted: 0\n",
            "\n",
            "Actual: 1, Logistic Regression Predicted: 0\n",
            "\n",
            "Actual: 0, Logistic Regression Predicted: 0\n",
            "\n",
            "Actual: 0, Logistic Regression Predicted: 0\n",
            "\n",
            "Actual: 0, Logistic Regression Predicted: 0\n",
            "\n",
            "Actual: 0, Logistic Regression Predicted: 0\n",
            "\n",
            "Actual: 2, Logistic Regression Predicted: 2\n",
            "\n",
            "Actual: 0, Logistic Regression Predicted: 0\n",
            "\n",
            "Actual: 0, Logistic Regression Predicted: 0\n",
            "\n",
            "Actual: 0, Logistic Regression Predicted: 0\n",
            "\n",
            "Actual: 0, Logistic Regression Predicted: 0\n",
            "\n",
            "Actual: 1, Logistic Regression Predicted: 0\n",
            "\n"
          ]
        }
      ],
      "source": [
        "print('0 = negative, 1 = positive')\n",
        "for actual, predicted in zip(ytest[:15], y_pred_lr[:15]):\n",
        "    print(f\"Actual: {actual}, Logistic Regression Predicted: {predicted}\")\n",
        "    print()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "be6cecf4-f22c-4eac-bfd8-65a81e061ee9",
      "metadata": {
        "id": "be6cecf4-f22c-4eac-bfd8-65a81e061ee9",
        "outputId": "69e19f03-25e2-4444-b122-d0bd2b1c0dd9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Logistic Regression Accuracy: 0.84\n",
            "Logistic Regression Precision: 0.81\n",
            "Logistic Regression Recall: 0.84\n",
            "Logistic Regression F1 score: 0.81\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.83      0.95      0.89      2154\n",
            "           1       0.46      0.02      0.04       294\n",
            "           2       0.87      0.84      0.85      1282\n",
            "\n",
            "    accuracy                           0.84      3730\n",
            "   macro avg       0.72      0.60      0.59      3730\n",
            "weighted avg       0.81      0.84      0.81      3730\n",
            "\n",
            "Confusion Matrix\n",
            "[[2057    5   92]\n",
            " [ 221    6   67]\n",
            " [ 209    2 1071]]\n"
          ]
        }
      ],
      "source": [
        "print(f\"Logistic Regression Accuracy: {accuracy_lr:.2f}\")\n",
        "print(f\"Logistic Regression Precision: {precision_lr:.2f}\")\n",
        "print(f\"Logistic Regression Recall: {recall_lr:.2f}\")\n",
        "print(f\"Logistic Regression F1 score: {f1_lr:.2f}\")\n",
        "print(\"Classification Report:\")\n",
        "print(report_lr)\n",
        "print(\"Confusion Matrix\")\n",
        "print(cm_lr)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "0a0222ad-264e-40ac-a032-ab9b7ff2cd00",
      "metadata": {
        "id": "0a0222ad-264e-40ac-a032-ab9b7ff2cd00"
      },
      "source": [
        "### Naive bayes"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "bb0e65ee-dcb6-4494-bfad-95ac85448a24",
      "metadata": {
        "id": "bb0e65ee-dcb6-4494-bfad-95ac85448a24",
        "outputId": "e7b229fb-5b86-4ed3-b27a-d64a4922ae79",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Required time for Naive Bayes prediction:-  0.02581876900012503\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
          ]
        }
      ],
      "source": [
        "start = timer()\n",
        "y_pred_nb, accuracy_nb, precision_nb, recall_nb, f1_nb, report_nb, cm_nb = evaluate_model(nb_tfidf, tfidf_vectorizer_xtest, ytest)\n",
        "print('Required time for Naive Bayes prediction:- ', timer() - start)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "3c315f65-2f63-4924-b4a1-058c6ff5775d",
      "metadata": {
        "id": "3c315f65-2f63-4924-b4a1-058c6ff5775d"
      },
      "source": [
        "#### Print actual vs. predicted results for Naive bayes\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "77452499-14aa-41f3-b117-546b185aa32f",
      "metadata": {
        "id": "77452499-14aa-41f3-b117-546b185aa32f",
        "outputId": "bf7c6243-2eb2-40c3-c3f9-39f347cfc077",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0 = negative, 1 = positive\n",
            "Actual: 0, Naive bayes Predicted: 0\n",
            "\n",
            "Actual: 0, Naive bayes Predicted: 0\n",
            "\n",
            "Actual: 2, Naive bayes Predicted: 0\n",
            "\n",
            "Actual: 0, Naive bayes Predicted: 0\n",
            "\n",
            "Actual: 1, Naive bayes Predicted: 0\n",
            "\n",
            "Actual: 0, Naive bayes Predicted: 0\n",
            "\n",
            "Actual: 0, Naive bayes Predicted: 0\n",
            "\n",
            "Actual: 0, Naive bayes Predicted: 0\n",
            "\n",
            "Actual: 0, Naive bayes Predicted: 0\n",
            "\n",
            "Actual: 2, Naive bayes Predicted: 2\n",
            "\n",
            "Actual: 0, Naive bayes Predicted: 0\n",
            "\n",
            "Actual: 0, Naive bayes Predicted: 0\n",
            "\n",
            "Actual: 0, Naive bayes Predicted: 0\n",
            "\n",
            "Actual: 0, Naive bayes Predicted: 0\n",
            "\n",
            "Actual: 1, Naive bayes Predicted: 0\n",
            "\n"
          ]
        }
      ],
      "source": [
        "print('0 = negative, 1 = positive')\n",
        "for actual, predicted in zip(ytest[:15], y_pred_nb[:15]):\n",
        "    print(f\"Actual: {actual}, Naive bayes Predicted: {predicted}\")\n",
        "    print()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c564657e-19e5-43eb-9ed0-ca0e73db8e65",
      "metadata": {
        "id": "c564657e-19e5-43eb-9ed0-ca0e73db8e65",
        "outputId": "b4484947-fd2a-4d8a-d436-f64e6340f429",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Naive bayes Accuracy: 0.81\n",
            "Naive bayes Precision: 0.76\n",
            "Naive bayes Recall: 0.81\n",
            "Naive bayes F1 score: 0.78\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.77      0.98      0.87      2154\n",
            "           1       0.00      0.00      0.00       294\n",
            "           2       0.92      0.71      0.80      1282\n",
            "\n",
            "    accuracy                           0.81      3730\n",
            "   macro avg       0.56      0.57      0.56      3730\n",
            "weighted avg       0.76      0.81      0.78      3730\n",
            "\n",
            "Confusion Matrix:\n",
            "[[2116    0   38]\n",
            " [ 254    0   40]\n",
            " [ 368    0  914]]\n"
          ]
        }
      ],
      "source": [
        "print(f\"Naive bayes Accuracy: {accuracy_nb:.2f}\")\n",
        "print(f\"Naive bayes Precision: {precision_nb:.2f}\")\n",
        "print(f\"Naive bayes Recall: {recall_nb:.2f}\")\n",
        "print(f\"Naive bayes F1 score: {f1_nb:.2f}\")\n",
        "print(\"Classification Report:\")\n",
        "print(report_nb)\n",
        "print(\"Confusion Matrix:\")\n",
        "print(cm_nb)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "85e291f9-7f4a-4ee4-b62d-afc9981d4d5e",
      "metadata": {
        "id": "85e291f9-7f4a-4ee4-b62d-afc9981d4d5e"
      },
      "source": [
        "### XGBoost Classifier"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "15c8b8ef-5f43-4db0-adf7-27ac972ad917",
      "metadata": {
        "id": "15c8b8ef-5f43-4db0-adf7-27ac972ad917",
        "outputId": "240b3b07-49de-4928-dbe0-e5bf7fd23dc5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Required time for XGBoost classifier prediction:-  0.09501199500004986\n"
          ]
        }
      ],
      "source": [
        "start = timer()\n",
        "y_pred_xgboost, accuracy_xgboost, precision_xgboost, recall_xgboost, f1_xgboost, report_xgboost, cm_xgboost = evaluate_model(xgboost_tfidf, tfidf_vectorizer_xtest, ytest)\n",
        "print('Required time for XGBoost classifier prediction:- ', timer() - start)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "5cee48b3-b0d0-4ec4-8e1d-1b1a6523c1fe",
      "metadata": {
        "id": "5cee48b3-b0d0-4ec4-8e1d-1b1a6523c1fe"
      },
      "source": [
        "#### Print actual vs. predicted results for XGBoost classifier\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ae277999-c33f-4127-90e9-a5e6e34b23a8",
      "metadata": {
        "id": "ae277999-c33f-4127-90e9-a5e6e34b23a8",
        "outputId": "c3f02de8-03a8-4418-e8e7-d0b13a6f9362",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0 = negative, 1 = positive\n",
            "Actual: 0, XGBoost Predicted: 0\n",
            "\n",
            "Actual: 0, XGBoost Predicted: 0\n",
            "\n",
            "Actual: 2, XGBoost Predicted: 2\n",
            "\n",
            "Actual: 0, XGBoost Predicted: 0\n",
            "\n",
            "Actual: 1, XGBoost Predicted: 0\n",
            "\n",
            "Actual: 0, XGBoost Predicted: 0\n",
            "\n",
            "Actual: 0, XGBoost Predicted: 1\n",
            "\n",
            "Actual: 0, XGBoost Predicted: 0\n",
            "\n",
            "Actual: 0, XGBoost Predicted: 0\n",
            "\n",
            "Actual: 2, XGBoost Predicted: 2\n",
            "\n",
            "Actual: 0, XGBoost Predicted: 0\n",
            "\n",
            "Actual: 0, XGBoost Predicted: 1\n",
            "\n",
            "Actual: 0, XGBoost Predicted: 0\n",
            "\n",
            "Actual: 0, XGBoost Predicted: 0\n",
            "\n",
            "Actual: 1, XGBoost Predicted: 0\n",
            "\n"
          ]
        }
      ],
      "source": [
        "print('0 = negative, 1 = positive')\n",
        "for actual, predicted in zip(ytest[:15], y_pred_xgboost[:15]):\n",
        "    print(f\"Actual: {actual}, XGBoost Predicted: {predicted}\")\n",
        "    print()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b477ba4b-24cb-4e5b-888b-42d62c0d4f02",
      "metadata": {
        "id": "b477ba4b-24cb-4e5b-888b-42d62c0d4f02",
        "outputId": "2d41045b-978a-4442-83a4-a61aaf24b6a2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "XGBoost Accuracy: 0.82\n",
            "XGBoost Precision: 0.77\n",
            "XGBoost Recall: 0.82\n",
            "XGBoost F1 score: 0.79\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.82      0.93      0.87      2154\n",
            "           1       0.14      0.01      0.02       294\n",
            "           2       0.83      0.83      0.83      1282\n",
            "\n",
            "    accuracy                           0.82      3730\n",
            "   macro avg       0.60      0.59      0.57      3730\n",
            "weighted avg       0.77      0.82      0.79      3730\n",
            "\n",
            "Confusion Matrix:\n",
            "[[1997   11  146]\n",
            " [ 223    3   68]\n",
            " [ 207    7 1068]]\n"
          ]
        }
      ],
      "source": [
        "print(f\"XGBoost Accuracy: {accuracy_xgboost:.2f}\")\n",
        "print(f\"XGBoost Precision: {precision_xgboost:.2f}\")\n",
        "print(f\"XGBoost Recall: {recall_xgboost:.2f}\")\n",
        "print(f\"XGBoost F1 score: {f1_xgboost:.2f}\")\n",
        "print(\"Classification Report:\")\n",
        "print(report_xgboost)\n",
        "print(\"Confusion Matrix:\")\n",
        "print(cm_xgboost)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "a27a6d4d-5cec-4a00-9646-793488fc4964",
      "metadata": {
        "id": "a27a6d4d-5cec-4a00-9646-793488fc4964"
      },
      "source": [
        "### Random Forest Classifier"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "5cfa9a30-1b1b-45a7-b122-4abbe8346461",
      "metadata": {
        "id": "5cfa9a30-1b1b-45a7-b122-4abbe8346461",
        "outputId": "0f9d94b3-ba1b-40fe-b8a0-35e6b39ac4d0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Required time for Random Forest classifier prediction:-  0.06976961300006224\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
          ]
        }
      ],
      "source": [
        "start = timer()\n",
        "y_pred_rfc, accuracy_rfc, precision_rfc, recall_rfc, f1_rfc, report_rfc, cm_rfc = evaluate_model(rfc_tfidf, tfidf_vectorizer_xtest, ytest)\n",
        "print('Required time for Random Forest classifier prediction:- ', timer() - start)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "fe655b46-23f8-4b23-8df1-6d15309d3f12",
      "metadata": {
        "id": "fe655b46-23f8-4b23-8df1-6d15309d3f12"
      },
      "source": [
        "#### Print actual vs. predicted results for Random Forest classifier"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "4d5e8ac2-bd2f-4aa2-9f2d-cf23d24361f1",
      "metadata": {
        "id": "4d5e8ac2-bd2f-4aa2-9f2d-cf23d24361f1",
        "outputId": "6c12013b-9b22-43ad-982e-ff4d1b66a30b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0 = negative, 1 = positive\n",
            "Actual: 0, Random Forest Predicted: 0\n",
            "\n",
            "Actual: 0, Random Forest Predicted: 0\n",
            "\n",
            "Actual: 2, Random Forest Predicted: 0\n",
            "\n",
            "Actual: 0, Random Forest Predicted: 0\n",
            "\n",
            "Actual: 1, Random Forest Predicted: 0\n",
            "\n",
            "Actual: 0, Random Forest Predicted: 0\n",
            "\n",
            "Actual: 0, Random Forest Predicted: 0\n",
            "\n",
            "Actual: 0, Random Forest Predicted: 0\n",
            "\n",
            "Actual: 0, Random Forest Predicted: 0\n",
            "\n",
            "Actual: 2, Random Forest Predicted: 0\n",
            "\n",
            "Actual: 0, Random Forest Predicted: 0\n",
            "\n",
            "Actual: 0, Random Forest Predicted: 0\n",
            "\n",
            "Actual: 0, Random Forest Predicted: 0\n",
            "\n",
            "Actual: 0, Random Forest Predicted: 0\n",
            "\n",
            "Actual: 1, Random Forest Predicted: 0\n",
            "\n"
          ]
        }
      ],
      "source": [
        "print('0 = negative, 1 = positive')\n",
        "for actual, predicted in zip(ytest[:15], y_pred_rfc[:15]):\n",
        "    print(f\"Actual: {actual}, Random Forest Predicted: {predicted}\")\n",
        "    print()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ab187b17-3db3-4b9b-b7ab-c4d143197b7a",
      "metadata": {
        "id": "ab187b17-3db3-4b9b-b7ab-c4d143197b7a",
        "outputId": "ffe15447-8a56-4b3a-c51d-f66fe1cf305e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Random Forest Accuracy: 0.58\n",
            "Random Forest Precision: 0.33\n",
            "Random Forest Recall: 0.58\n",
            "Random Forest F1 score: 0.42\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.58      1.00      0.73      2154\n",
            "           1       0.00      0.00      0.00       294\n",
            "           2       0.00      0.00      0.00      1282\n",
            "\n",
            "    accuracy                           0.58      3730\n",
            "   macro avg       0.19      0.33      0.24      3730\n",
            "weighted avg       0.33      0.58      0.42      3730\n",
            "\n",
            "Confusion Matrix:\n",
            "[[2154    0    0]\n",
            " [ 294    0    0]\n",
            " [1282    0    0]]\n"
          ]
        }
      ],
      "source": [
        "print(f\"Random Forest Accuracy: {accuracy_rfc:.2f}\")\n",
        "print(f\"Random Forest Precision: {precision_rfc:.2f}\")\n",
        "print(f\"Random Forest Recall: {recall_rfc:.2f}\")\n",
        "print(f\"Random Forest F1 score: {f1_rfc:.2f}\")\n",
        "print(\"Classification Report:\")\n",
        "print(report_rfc)\n",
        "print(\"Confusion Matrix:\")\n",
        "print(cm_rfc)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "9a592bf1-0eb7-48e6-8601-0898db9ae9ce",
      "metadata": {
        "id": "9a592bf1-0eb7-48e6-8601-0898db9ae9ce"
      },
      "source": [
        "#### Display all five models accuracy"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ff1e68fb-4836-4aa3-afd4-25ab644c5236",
      "metadata": {
        "id": "ff1e68fb-4836-4aa3-afd4-25ab644c5236"
      },
      "outputs": [],
      "source": [
        "model_names = ['LinearSVM', 'LogisticRegression', 'NaiveBayes', 'XGBoost', 'RandomForest']\n",
        "model_accuracies = [accuracy_svm, accuracy_lr, accuracy_nb, accuracy_xgboost, accuracy_rfc]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3dde51c8-e9d8-4776-a187-99d19f7ae441",
      "metadata": {
        "id": "3dde51c8-e9d8-4776-a187-99d19f7ae441",
        "outputId": "36475e10-bc35-4b79-b6e3-868ea3eac2e1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.figure(figsize=(10, 6))\n",
        "plt.bar(model_names, model_accuracies, color=['blue', 'green', 'orange', 'red', 'purple'])\n",
        "plt.xlabel(\"Models\")\n",
        "plt.ylabel(\"Accuracy\")\n",
        "plt.title(\"Model Accuracy Comparison with TFIDF\")\n",
        "plt.ylim(0.0, 1.0)  # Set the y-axis limits\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "824f4682-946e-4f55-8890-9e321a54ea90",
      "metadata": {
        "id": "824f4682-946e-4f55-8890-9e321a54ea90"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "id": "088056e2-1950-4bf4-94bf-9e8e9a59405b",
      "metadata": {
        "id": "088056e2-1950-4bf4-94bf-9e8e9a59405b"
      },
      "source": [
        "## 2. Universal Sentence Encoder (USE)\n",
        "#### 1. Linear SVM\n",
        "#### 2. Logistic Regression\n",
        "#### 3. XGBoost classifier\n",
        "#### 4. Random Forest classifier"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "59fd68e1-f425-462d-a2c9-da43542aad71",
      "metadata": {
        "id": "59fd68e1-f425-462d-a2c9-da43542aad71"
      },
      "source": [
        "#### Load the Universal Sentence Encoder model, and embed this model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3f673c84-af0c-4aef-9f70-419072e3926f",
      "metadata": {
        "id": "3f673c84-af0c-4aef-9f70-419072e3926f",
        "outputId": "673568e3-ed6b-4d94-fa92-afa244e4fb49",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Required time for upload USE from tensorflow hub:-  24.110286948000066\n"
          ]
        }
      ],
      "source": [
        "start = timer()\n",
        "embed = hub.load(\"https://tfhub.dev/google/universal-sentence-encoder/4\")\n",
        "print('Required time for upload USE from tensorflow hub:- ', timer() - start)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f1eb3f78-13d2-418d-8d20-b9f00e3e81a5",
      "metadata": {
        "id": "f1eb3f78-13d2-418d-8d20-b9f00e3e81a5"
      },
      "outputs": [],
      "source": [
        "xtrain_use = []\n",
        "xtest_use = []"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "5842e6c3-ef9c-42a4-877d-d61d9b1fe26c",
      "metadata": {
        "id": "5842e6c3-ef9c-42a4-877d-d61d9b1fe26c",
        "outputId": "6600efc2-377b-4047-fa1a-ddbecf2c208a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Required time for embedding xtrain with USE:-  3.2705285170000025\n"
          ]
        }
      ],
      "source": [
        "start = timer()\n",
        "for i in range(0, len(xtrain), batch_size):\n",
        "    batch_X_train = xtrain[i:i + batch_size]\n",
        "    batch_X_train_use = np.array(embed(batch_X_train))\n",
        "    xtrain_use.extend(batch_X_train_use)\n",
        "print('Required time for embedding xtrain with USE:- ', timer() - start)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "431ee9ce-03d6-428a-8db8-b0f19ed9f032",
      "metadata": {
        "id": "431ee9ce-03d6-428a-8db8-b0f19ed9f032",
        "outputId": "1322b9b8-6a16-4538-90a1-f9a9ca793d6c",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Required time for embedding xtest with USE:-  0.6314753839997138\n"
          ]
        }
      ],
      "source": [
        "start = timer()\n",
        "for i in range(0, len(xtest), batch_size):\n",
        "    batch_X_test = xtest[i:i + batch_size]\n",
        "    batch_X_test_use = np.array(embed(batch_X_test))\n",
        "    xtest_use.extend(batch_X_test_use)\n",
        "print('Required time for embedding xtest with USE:- ', timer() - start)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "3d079e02-63bf-400b-acc1-a66c070f6404",
      "metadata": {
        "id": "3d079e02-63bf-400b-acc1-a66c070f6404"
      },
      "source": [
        "#### Fit classifiers"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7eb3f533-c4c3-4709-88ed-78da68d3a0d2",
      "metadata": {
        "id": "7eb3f533-c4c3-4709-88ed-78da68d3a0d2",
        "outputId": "aae1faaa-cd1b-4f92-f3c5-b4b867cbd949",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Required time for training Linear SVM classifier:-  12.744543232000069\n",
            "Required time for training Logistic Regression:-  4.729798845000005\n",
            "Required time for training XGBoost classifier:-  72.49262046100012\n",
            "Required time for training all Random Forest classifier:-  11.729280215000017\n"
          ]
        }
      ],
      "source": [
        "start = timer()\n",
        "svm_use = svm_classifier.fit(xtrain_use, ytrain)\n",
        "print('Required time for training Linear SVM classifier:- ', timer() - start)\n",
        "start = timer()\n",
        "lr_use = logistic_regression.fit(xtrain_use, ytrain)\n",
        "print('Required time for training Logistic Regression:- ', timer() - start)\n",
        "start = timer()\n",
        "xgboost_use = xgboost_classifier.fit(xtrain_use, ytrain)\n",
        "print('Required time for training XGBoost classifier:- ', timer() - start)\n",
        "start = timer()\n",
        "rfc_use = random_forest_classifier.fit(xtrain_use, ytrain)\n",
        "print('Required time for training all Random Forest classifier:- ', timer() - start)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "c92dfbf4-08ba-4236-8d6d-af68465b50fe",
      "metadata": {
        "id": "c92dfbf4-08ba-4236-8d6d-af68465b50fe"
      },
      "source": [
        "#### Make predictions"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "09da979e-43f9-4438-a0cb-ab0fb66f0fdd",
      "metadata": {
        "id": "09da979e-43f9-4438-a0cb-ab0fb66f0fdd"
      },
      "source": [
        "### Linear SVM"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8dbece2d-a9d0-456c-a231-eac4a7d265f6",
      "metadata": {
        "id": "8dbece2d-a9d0-456c-a231-eac4a7d265f6",
        "outputId": "6bfade3e-2bad-49ba-e3f2-fc3016b476e3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Required time for Linear SVM prediction with USE :-  0.03787283099973138\n"
          ]
        }
      ],
      "source": [
        "start = timer()\n",
        "y_pred_svm_use, accuracy_svm_use, precision_svm_use, recall_svm_use, f1_svm_use, report_svm_use, cm_svm_use = evaluate_model(svm_use, xtest_use, ytest)\n",
        "print('Required time for Linear SVM prediction with USE :- ', timer() - start)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "5a9c6b6c-069f-4fdd-a579-9f63906191b5",
      "metadata": {
        "id": "5a9c6b6c-069f-4fdd-a579-9f63906191b5"
      },
      "source": [
        "#### Print actual vs. predicted results for LinearSVM with USE"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9fb07728-d982-4964-90bc-bf41f0bde12c",
      "metadata": {
        "id": "9fb07728-d982-4964-90bc-bf41f0bde12c",
        "outputId": "19678ac0-5305-427b-b9d1-d6998495c4cb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0 = negative, 1 = positive\n",
            "Actual: 0, SVM with USE embedding Predicted: 0\n",
            "\n",
            "Actual: 0, SVM with USE embedding Predicted: 0\n",
            "\n",
            "Actual: 2, SVM with USE embedding Predicted: 0\n",
            "\n",
            "Actual: 0, SVM with USE embedding Predicted: 0\n",
            "\n",
            "Actual: 1, SVM with USE embedding Predicted: 0\n",
            "\n",
            "Actual: 0, SVM with USE embedding Predicted: 0\n",
            "\n",
            "Actual: 0, SVM with USE embedding Predicted: 0\n",
            "\n",
            "Actual: 0, SVM with USE embedding Predicted: 0\n",
            "\n",
            "Actual: 0, SVM with USE embedding Predicted: 0\n",
            "\n",
            "Actual: 2, SVM with USE embedding Predicted: 2\n",
            "\n",
            "Actual: 0, SVM with USE embedding Predicted: 0\n",
            "\n",
            "Actual: 0, SVM with USE embedding Predicted: 0\n",
            "\n",
            "Actual: 0, SVM with USE embedding Predicted: 0\n",
            "\n",
            "Actual: 0, SVM with USE embedding Predicted: 0\n",
            "\n",
            "Actual: 1, SVM with USE embedding Predicted: 0\n",
            "\n"
          ]
        }
      ],
      "source": [
        "print('0 = negative, 1 = positive')\n",
        "for actual, predicted in zip(ytest[:15], y_pred_svm_use[:15]):\n",
        "    print(f\"Actual: {actual}, SVM with USE embedding Predicted: {predicted}\")\n",
        "    print()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "10d6b544-a9e5-4262-ad6f-a6909d1776d7",
      "metadata": {
        "id": "10d6b544-a9e5-4262-ad6f-a6909d1776d7",
        "outputId": "bf6565b9-2033-423b-80dc-754a4060a86d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "LinearSVM (USE) Accuracy: 0.84\n",
            "LinearSVM (USE) Precision: 0.85\n",
            "LinearSVM (USE) Recall: 0.84\n",
            "LinearSVM (USE) F1 score: 0.80\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.83      0.95      0.89      2154\n",
            "           1       1.00      0.00      0.01       294\n",
            "           2       0.85      0.85      0.85      1282\n",
            "\n",
            "    accuracy                           0.84      3730\n",
            "   macro avg       0.90      0.60      0.58      3730\n",
            "weighted avg       0.85      0.84      0.80      3730\n",
            "\n",
            "Confusion Matrix\n",
            "[[2042    0  112]\n",
            " [ 219    1   74]\n",
            " [ 195    0 1087]]\n"
          ]
        }
      ],
      "source": [
        "print(f\"LinearSVM (USE) Accuracy: {accuracy_svm_use:.2f}\")\n",
        "print(f\"LinearSVM (USE) Precision: {precision_svm_use:.2f}\")\n",
        "print(f\"LinearSVM (USE) Recall: {recall_svm_use:.2f}\")\n",
        "print(f\"LinearSVM (USE) F1 score: {f1_svm_use:.2f}\")\n",
        "print(\"Classification Report:\")\n",
        "print(report_svm_use)\n",
        "print(\"Confusion Matrix\")\n",
        "print(cm_svm_use)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "b3cd44cc-ce2b-41fb-a883-5dcc3a50d6f2",
      "metadata": {
        "id": "b3cd44cc-ce2b-41fb-a883-5dcc3a50d6f2"
      },
      "source": [
        "### Logitic Regression"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7697ced6-a18a-4187-987f-01f5b23f4d7a",
      "metadata": {
        "id": "7697ced6-a18a-4187-987f-01f5b23f4d7a",
        "outputId": "69e0c7f5-6406-43d4-c43c-870b3f8d6a48",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Required time for LR prediction with USE :-  0.03608759999997346\n"
          ]
        }
      ],
      "source": [
        "start = timer()\n",
        "y_pred_lr_use, accuracy_lr_use, precision_lr_use, recall_lr_use, f1_lr_use, report_lr_use, cm_lr_use = evaluate_model(lr_use, xtest_use, ytest)\n",
        "print('Required time for LR prediction with USE :- ', timer() - start)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "76c9e2af-4d09-4716-9f63-b4882dcd4b78",
      "metadata": {
        "id": "76c9e2af-4d09-4716-9f63-b4882dcd4b78"
      },
      "source": [
        "#### Print actual vs. predicted results for Logistic Regression with USE"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3be83df8-b3a7-49c9-8774-7ecab4156fdb",
      "metadata": {
        "id": "3be83df8-b3a7-49c9-8774-7ecab4156fdb",
        "outputId": "04b1da93-cdcb-4695-ae3a-e51a85c44335",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0 = negative, 1 = positive\n",
            "Actual: 0, Logistic Regression Predicted with USE: 0\n",
            "\n",
            "Actual: 0, Logistic Regression Predicted with USE: 0\n",
            "\n",
            "Actual: 2, Logistic Regression Predicted with USE: 2\n",
            "\n",
            "Actual: 0, Logistic Regression Predicted with USE: 0\n",
            "\n",
            "Actual: 1, Logistic Regression Predicted with USE: 0\n",
            "\n",
            "Actual: 0, Logistic Regression Predicted with USE: 0\n",
            "\n",
            "Actual: 0, Logistic Regression Predicted with USE: 0\n",
            "\n",
            "Actual: 0, Logistic Regression Predicted with USE: 0\n",
            "\n",
            "Actual: 0, Logistic Regression Predicted with USE: 0\n",
            "\n",
            "Actual: 2, Logistic Regression Predicted with USE: 2\n",
            "\n",
            "Actual: 0, Logistic Regression Predicted with USE: 0\n",
            "\n",
            "Actual: 0, Logistic Regression Predicted with USE: 0\n",
            "\n",
            "Actual: 0, Logistic Regression Predicted with USE: 0\n",
            "\n",
            "Actual: 0, Logistic Regression Predicted with USE: 0\n",
            "\n",
            "Actual: 1, Logistic Regression Predicted with USE: 0\n",
            "\n"
          ]
        }
      ],
      "source": [
        "print('0 = negative, 1 = positive')\n",
        "for actual, predicted in zip(ytest[:15], y_pred_lr_use[:15]):\n",
        "    print(f\"Actual: {actual}, Logistic Regression Predicted with USE: {predicted}\")\n",
        "    print()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "13cb5d68-dda4-4175-a76c-c284cca42275",
      "metadata": {
        "id": "13cb5d68-dda4-4175-a76c-c284cca42275",
        "outputId": "70d18fdc-da13-4834-91fc-12fc56482274",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Logistic Regression (USE) Accuracy: 0.84\n",
            "Logistic Regression (USE) Precision: 0.80\n",
            "Logistic Regression (USE) Recall: 0.84\n",
            "Logistic Regression (USE) F1 score: 0.81\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.83      0.95      0.89      2154\n",
            "           1       0.33      0.01      0.03       294\n",
            "           2       0.85      0.84      0.85      1282\n",
            "\n",
            "    accuracy                           0.84      3730\n",
            "   macro avg       0.67      0.60      0.59      3730\n",
            "weighted avg       0.80      0.84      0.81      3730\n",
            "\n",
            "Confusion Matrix\n",
            "[[2039    2  113]\n",
            " [ 218    4   72]\n",
            " [ 194    6 1082]]\n"
          ]
        }
      ],
      "source": [
        "print(f\"Logistic Regression (USE) Accuracy: {accuracy_lr_use:.2f}\")\n",
        "print(f\"Logistic Regression (USE) Precision: {precision_lr_use:.2f}\")\n",
        "print(f\"Logistic Regression (USE) Recall: {recall_lr_use:.2f}\")\n",
        "print(f\"Logistic Regression (USE) F1 score: {f1_lr_use:.2f}\")\n",
        "print(\"Classification Report:\")\n",
        "print(report_lr_use)\n",
        "print(\"Confusion Matrix\")\n",
        "print(cm_lr_use)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "7c67a1ff-2f71-4d6a-84a3-4f47a5598ed4",
      "metadata": {
        "id": "7c67a1ff-2f71-4d6a-84a3-4f47a5598ed4"
      },
      "source": [
        "### XGBoost Classifier"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f924c51e-7524-4a0c-ac5c-224cddbef6f8",
      "metadata": {
        "id": "f924c51e-7524-4a0c-ac5c-224cddbef6f8",
        "outputId": "b33a0e01-a491-4555-d824-03f9531a67aa",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Required time for XGBoost classifier prediction with USE:-  0.10512904100005471\n"
          ]
        }
      ],
      "source": [
        "start = timer()\n",
        "y_pred_xgboost_use, accuracy_xgboost_use, precision_xgboost_use, recall_xgboost_use, f1_xgboost_use, report_xgboost_use, cm_xgboost_use = evaluate_model(xgboost_use, xtest_use, ytest)\n",
        "print('Required time for XGBoost classifier prediction with USE:- ', timer() - start)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "7014ca0b-a60b-4362-894a-42f3bd457b49",
      "metadata": {
        "id": "7014ca0b-a60b-4362-894a-42f3bd457b49"
      },
      "source": [
        "#### Print actual vs. predicted results for XGBooost classifier with USE"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c4b81fed-c0a4-4326-b6b2-7638c3b26887",
      "metadata": {
        "id": "c4b81fed-c0a4-4326-b6b2-7638c3b26887",
        "outputId": "b9607cac-6978-43f4-e65b-84a406b96d60",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0 = negative, 1 = positive\n",
            "Actual: 0, XGBoost with USE Predicted: 0\n",
            "\n",
            "Actual: 0, XGBoost with USE Predicted: 0\n",
            "\n",
            "Actual: 2, XGBoost with USE Predicted: 0\n",
            "\n",
            "Actual: 0, XGBoost with USE Predicted: 0\n",
            "\n",
            "Actual: 1, XGBoost with USE Predicted: 0\n",
            "\n",
            "Actual: 0, XGBoost with USE Predicted: 0\n",
            "\n",
            "Actual: 0, XGBoost with USE Predicted: 0\n",
            "\n",
            "Actual: 0, XGBoost with USE Predicted: 0\n",
            "\n",
            "Actual: 0, XGBoost with USE Predicted: 0\n",
            "\n",
            "Actual: 2, XGBoost with USE Predicted: 2\n",
            "\n",
            "Actual: 0, XGBoost with USE Predicted: 0\n",
            "\n",
            "Actual: 0, XGBoost with USE Predicted: 0\n",
            "\n",
            "Actual: 0, XGBoost with USE Predicted: 0\n",
            "\n",
            "Actual: 0, XGBoost with USE Predicted: 0\n",
            "\n",
            "Actual: 1, XGBoost with USE Predicted: 0\n",
            "\n"
          ]
        }
      ],
      "source": [
        "print('0 = negative, 1 = positive')\n",
        "for actual, predicted in zip(ytest[:15], y_pred_xgboost_use[:15]):\n",
        "    print(f\"Actual: {actual}, XGBoost with USE Predicted: {predicted}\")\n",
        "    print()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3d11bbe0-28fa-482e-9872-c9523dcc874e",
      "metadata": {
        "id": "3d11bbe0-28fa-482e-9872-c9523dcc874e",
        "outputId": "affae794-eedb-4f68-97a3-2adab123adf7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "XGBoost (USE) Accuracy: 0.84\n",
            "XGBoost (USE) Precision: 0.80\n",
            "XGBoost (USE) Recall: 0.84\n",
            "XGBoost (USE) F1 score: 0.80\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.82      0.95      0.88      2154\n",
            "           1       0.40      0.01      0.01       294\n",
            "           2       0.86      0.84      0.85      1282\n",
            "\n",
            "    accuracy                           0.84      3730\n",
            "   macro avg       0.69      0.60      0.58      3730\n",
            "weighted avg       0.80      0.84      0.80      3730\n",
            "\n",
            "Confusion Matrix:\n",
            "[[2041    3  110]\n",
            " [ 227    2   65]\n",
            " [ 207    0 1075]]\n"
          ]
        }
      ],
      "source": [
        "print(f\"XGBoost (USE) Accuracy: {accuracy_xgboost_use:.2f}\")\n",
        "print(f\"XGBoost (USE) Precision: {precision_xgboost_use:.2f}\")\n",
        "print(f\"XGBoost (USE) Recall: {recall_xgboost_use:.2f}\")\n",
        "print(f\"XGBoost (USE) F1 score: {f1_xgboost_use:.2f}\")\n",
        "print(\"Classification Report:\")\n",
        "print(report_xgboost_use)\n",
        "print(\"Confusion Matrix:\")\n",
        "print(cm_xgboost_use)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "f75e7d65-8506-4c59-a21d-3005666d1b2d",
      "metadata": {
        "id": "f75e7d65-8506-4c59-a21d-3005666d1b2d"
      },
      "source": [
        "### Random Forest Classifier"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "5fd0ff15-78bc-428c-83e0-4c4efdb8f9ed",
      "metadata": {
        "id": "5fd0ff15-78bc-428c-83e0-4c4efdb8f9ed",
        "outputId": "42f5612a-029d-44a7-8ca6-2b01250f6c9e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Required time for Random Forest classifier with USE prediction:-  0.08618015100000775\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
          ]
        }
      ],
      "source": [
        "start = timer()\n",
        "y_pred_rfc_use, accuracy_rfc_use, precision_rfc_use, recall_rfc_use, f1_rfc_use, report_rfc_use, cm_rfc_use = evaluate_model(rfc_use, xtest_use, ytest)\n",
        "print('Required time for Random Forest classifier with USE prediction:- ', timer() - start)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "bd3c72de-ac43-41ec-bf45-137179473e4c",
      "metadata": {
        "id": "bd3c72de-ac43-41ec-bf45-137179473e4c"
      },
      "source": [
        "#### Print actual vs. predicted results for Random Forest classifier with USE"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f4cca2e7-8c13-4552-86ca-31e12bcaaba5",
      "metadata": {
        "id": "f4cca2e7-8c13-4552-86ca-31e12bcaaba5",
        "outputId": "a1a1395f-546e-476b-e4a1-defb22bde2d4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0 = negative, 1 = positive\n",
            "Actual: 0, Random Forest with USE Predicted: 0\n",
            "\n",
            "Actual: 0, Random Forest with USE Predicted: 0\n",
            "\n",
            "Actual: 2, Random Forest with USE Predicted: 0\n",
            "\n",
            "Actual: 0, Random Forest with USE Predicted: 0\n",
            "\n",
            "Actual: 1, Random Forest with USE Predicted: 0\n",
            "\n",
            "Actual: 0, Random Forest with USE Predicted: 0\n",
            "\n",
            "Actual: 0, Random Forest with USE Predicted: 0\n",
            "\n",
            "Actual: 0, Random Forest with USE Predicted: 0\n",
            "\n",
            "Actual: 0, Random Forest with USE Predicted: 0\n",
            "\n",
            "Actual: 2, Random Forest with USE Predicted: 2\n",
            "\n",
            "Actual: 0, Random Forest with USE Predicted: 0\n",
            "\n",
            "Actual: 0, Random Forest with USE Predicted: 0\n",
            "\n",
            "Actual: 0, Random Forest with USE Predicted: 0\n",
            "\n",
            "Actual: 0, Random Forest with USE Predicted: 0\n",
            "\n",
            "Actual: 1, Random Forest with USE Predicted: 0\n",
            "\n"
          ]
        }
      ],
      "source": [
        "print('0 = negative, 1 = positive')\n",
        "for actual, predicted in zip(ytest[:15], y_pred_rfc_use[:15]):\n",
        "    print(f\"Actual: {actual}, Random Forest with USE Predicted: {predicted}\")\n",
        "    print()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a0a3eb5b-660b-461e-831d-371abdacac9f",
      "metadata": {
        "id": "a0a3eb5b-660b-461e-831d-371abdacac9f",
        "outputId": "b335c8a5-048d-44c2-e404-06373cbd284a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Random Forest (USE) Accuracy: 0.80\n",
            "Random Forest (USE) Precision: 0.75\n",
            "Random Forest (USE) Recall: 0.80\n",
            "Random Forest (USE) F1 score: 0.76\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.77      0.97      0.86      2154\n",
            "           1       0.00      0.00      0.00       294\n",
            "           2       0.89      0.70      0.79      1282\n",
            "\n",
            "    accuracy                           0.80      3730\n",
            "   macro avg       0.55      0.56      0.55      3730\n",
            "weighted avg       0.75      0.80      0.76      3730\n",
            "\n",
            "Confusion Matrix:\n",
            "[[2088    0   66]\n",
            " [ 252    0   42]\n",
            " [ 383    0  899]]\n"
          ]
        }
      ],
      "source": [
        "print(f\"Random Forest (USE) Accuracy: {accuracy_rfc_use:.2f}\")\n",
        "print(f\"Random Forest (USE) Precision: {precision_rfc_use:.2f}\")\n",
        "print(f\"Random Forest (USE) Recall: {recall_rfc_use:.2f}\")\n",
        "print(f\"Random Forest (USE) F1 score: {f1_rfc_use:.2f}\")\n",
        "print(\"Classification Report:\")\n",
        "print(report_rfc_use)\n",
        "print(\"Confusion Matrix:\")\n",
        "print(cm_rfc_use)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "08674157-e878-426f-9376-6a47158b4db2",
      "metadata": {
        "id": "08674157-e878-426f-9376-6a47158b4db2"
      },
      "source": [
        "#### Display all four models accuracy\n",
        "##### (--Note: Naive bayes (MultinomialNB) model not used with USE embedding because it not able to resolve the issue of negative values)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "5a7d2cbc-8a7f-4126-b782-34baa998410d",
      "metadata": {
        "id": "5a7d2cbc-8a7f-4126-b782-34baa998410d"
      },
      "outputs": [],
      "source": [
        "model_names = ['LinearSVM', 'LogisticRegression', 'XGBoost', 'RandomForest']\n",
        "model_accuracies = [accuracy_svm_use, accuracy_lr_use, accuracy_xgboost_use, accuracy_rfc_use]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f656cc76-8d6f-46c5-bdc7-75db37e32ff6",
      "metadata": {
        "id": "f656cc76-8d6f-46c5-bdc7-75db37e32ff6",
        "outputId": "15e5d4b5-ec30-4265-b6a6-8644f37fffe1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.figure(figsize=(10, 6))\n",
        "plt.bar(model_names, model_accuracies, color=['blue', 'orange', 'red', 'purple'])\n",
        "plt.xlabel(\"Models\")\n",
        "plt.ylabel(\"Accuracy\")\n",
        "plt.title(\"Model Accuracy Comparison with USE\")\n",
        "plt.ylim(0.0, 1.0)  # Set the y-axis limits\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f27c247f-8160-4f8d-bb3f-698f2e134f25",
      "metadata": {
        "id": "f27c247f-8160-4f8d-bb3f-698f2e134f25"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "id": "da1716d1-26fc-4bd8-be95-c8cab7b483bc",
      "metadata": {
        "id": "da1716d1-26fc-4bd8-be95-c8cab7b483bc"
      },
      "source": [
        "## 3. TF-IDF + Universal Sentence Encoder (USE)\n",
        "#### 1. Linear SVM\n",
        "#### 2. Logistic Regression\n",
        "#### 3. XGBoost classifier\n",
        "#### 4. Random Forest classifier"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "22b0a099-a6d7-403d-87f3-a642d746251d",
      "metadata": {
        "id": "22b0a099-a6d7-403d-87f3-a642d746251d"
      },
      "source": [
        "#### Combine TF-IDF and Universal Sentence Encoder embeddings\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "65acc049-2ea5-455e-9753-845c774938f1",
      "metadata": {
        "id": "65acc049-2ea5-455e-9753-845c774938f1"
      },
      "outputs": [],
      "source": [
        "xtrain_tfidf_use_combined = tf.concat([tf.cast(tf.sparse.to_dense(tf.sparse.from_dense(tfidf_vectorizer_xtrain.toarray())), tf.float64), tf.constant(xtrain_use, dtype=tf.float64)], axis=1)\n",
        "xtest_tfidf_use_combined = tf.concat([tf.cast(tf.sparse.to_dense(tf.sparse.from_dense(tfidf_vectorizer_xtest.toarray())), tf.float64), tf.constant(xtest_use, dtype=tf.float64)], axis=1)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "d722ffc4-9aa0-467b-8bff-7a31125fd782",
      "metadata": {
        "id": "d722ffc4-9aa0-467b-8bff-7a31125fd782"
      },
      "source": [
        "#### Fit classifiers"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "96486ca5-c5fc-456f-8ef2-7f96eed0b435",
      "metadata": {
        "id": "96486ca5-c5fc-456f-8ef2-7f96eed0b435",
        "outputId": "4f48e692-0121-4b6e-d74d-a218f57b4085",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Required time for training Linear SVM:-  14.192087712000102\n",
            "Required time for training Logistic Regression:-  29.953596426999866\n",
            "Required time for training XGBoost classifier:-  319.0515332269997\n",
            "Required time for training Random Forest classifier:-  7.665318704999663\n"
          ]
        }
      ],
      "source": [
        "start = timer()\n",
        "svm_tfidf_use = svm_classifier.fit(xtrain_tfidf_use_combined, ytrain)\n",
        "print('Required time for training Linear SVM:- ', timer() - start)\n",
        "start = timer()\n",
        "lr_tfidf_use = logistic_regression.fit(xtrain_tfidf_use_combined, ytrain)\n",
        "print('Required time for training Logistic Regression:- ', timer() - start)\n",
        "start = timer()\n",
        "xgboost_tfidf_use = xgboost_classifier.fit(xtrain_tfidf_use_combined, ytrain)\n",
        "print('Required time for training XGBoost classifier:- ', timer() - start)\n",
        "start = timer()\n",
        "rfc_tfidf_use = random_forest_classifier.fit(xtrain_tfidf_use_combined, ytrain)\n",
        "print('Required time for training Random Forest classifier:- ', timer() - start)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "03ad8659-041b-4f03-ac37-bda2a7a6bb75",
      "metadata": {
        "id": "03ad8659-041b-4f03-ac37-bda2a7a6bb75"
      },
      "source": [
        "#### Make predictions"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "4691ce83-3a27-469f-9bf8-ca91e6cded61",
      "metadata": {
        "id": "4691ce83-3a27-469f-9bf8-ca91e6cded61"
      },
      "source": [
        "### Linear SVM"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "142f6937-5ca9-4dea-bdd5-4ede0b537783",
      "metadata": {
        "id": "142f6937-5ca9-4dea-bdd5-4ede0b537783",
        "outputId": "fdf88e05-bc42-4020-dcb0-8dbf3a26c90e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Required time for Linear SVM prediction with TFIDF+USE :-  0.15436921099990286\n"
          ]
        }
      ],
      "source": [
        "start = timer()\n",
        "y_pred_svm_tfidf_use, accuracy_svm_tfidf_use, precision_svm_tfidf_use, recall_svm_tfidf_use, f1_svm_tfidf_use, report_svm_tfidf_use, cm_svm_tfidf_use = evaluate_model(svm_tfidf_use, xtest_tfidf_use_combined, ytest)\n",
        "print('Required time for Linear SVM prediction with TFIDF+USE :- ', timer() - start)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "da1c1abb-d1eb-4f44-8e90-33160f357c1b",
      "metadata": {
        "id": "da1c1abb-d1eb-4f44-8e90-33160f357c1b"
      },
      "source": [
        "#### Print actual vs. predicted results for Linear SVM with TFIDF + USE"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d77ff7f6-af5d-44de-b4a9-5c2020255b69",
      "metadata": {
        "id": "d77ff7f6-af5d-44de-b4a9-5c2020255b69",
        "outputId": "03c7e3f9-e00d-4b09-d7f8-735945b6c1fe",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0 = negative, 1 = positive\n",
            "Actual: 0, SVM with TFIDF+USE Predicted: 0\n",
            "\n",
            "Actual: 0, SVM with TFIDF+USE Predicted: 0\n",
            "\n",
            "Actual: 2, SVM with TFIDF+USE Predicted: 2\n",
            "\n",
            "Actual: 0, SVM with TFIDF+USE Predicted: 0\n",
            "\n",
            "Actual: 1, SVM with TFIDF+USE Predicted: 0\n",
            "\n",
            "Actual: 0, SVM with TFIDF+USE Predicted: 0\n",
            "\n",
            "Actual: 0, SVM with TFIDF+USE Predicted: 1\n",
            "\n",
            "Actual: 0, SVM with TFIDF+USE Predicted: 0\n",
            "\n",
            "Actual: 0, SVM with TFIDF+USE Predicted: 0\n",
            "\n",
            "Actual: 2, SVM with TFIDF+USE Predicted: 2\n",
            "\n",
            "Actual: 0, SVM with TFIDF+USE Predicted: 0\n",
            "\n",
            "Actual: 0, SVM with TFIDF+USE Predicted: 0\n",
            "\n",
            "Actual: 0, SVM with TFIDF+USE Predicted: 0\n",
            "\n",
            "Actual: 0, SVM with TFIDF+USE Predicted: 0\n",
            "\n",
            "Actual: 1, SVM with TFIDF+USE Predicted: 0\n",
            "\n"
          ]
        }
      ],
      "source": [
        "print('0 = negative, 1 = positive')\n",
        "for actual, predicted in zip(ytest[:15], y_pred_svm_tfidf_use[:15]):\n",
        "    print(f\"Actual: {actual}, SVM with TFIDF+USE Predicted: {predicted}\")\n",
        "    print()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "515c87ab-fee7-4c71-af17-020e45c00ae0",
      "metadata": {
        "id": "515c87ab-fee7-4c71-af17-020e45c00ae0",
        "outputId": "36db77fc-9411-4517-908e-bff4cde3ab4b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "LinearSVM (TFIDF+USE) Accuracy: 0.84\n",
            "LinearSVM (TFIDF+USE) Precision: 0.81\n",
            "LinearSVM (TFIDF+USE) Recall: 0.84\n",
            "LinearSVM (TFIDF+USE) F1 score: 0.81\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.84      0.93      0.89      2154\n",
            "           1       0.35      0.07      0.12       294\n",
            "           2       0.85      0.85      0.85      1282\n",
            "\n",
            "    accuracy                           0.84      3730\n",
            "   macro avg       0.68      0.62      0.62      3730\n",
            "weighted avg       0.81      0.84      0.81      3730\n",
            "\n",
            "Confusion Matrix\n",
            "[[2009   22  123]\n",
            " [ 196   22   76]\n",
            " [ 176   19 1087]]\n"
          ]
        }
      ],
      "source": [
        "print(f\"LinearSVM (TFIDF+USE) Accuracy: {accuracy_svm_tfidf_use:.2f}\")\n",
        "print(f\"LinearSVM (TFIDF+USE) Precision: {precision_svm_tfidf_use:.2f}\")\n",
        "print(f\"LinearSVM (TFIDF+USE) Recall: {recall_svm_tfidf_use:.2f}\")\n",
        "print(f\"LinearSVM (TFIDF+USE) F1 score: {f1_svm_tfidf_use:.2f}\")\n",
        "print(\"Classification Report:\")\n",
        "print(report_svm_tfidf_use)\n",
        "print(\"Confusion Matrix\")\n",
        "print(cm_svm_tfidf_use)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "67dced06-8dcb-4bde-baf4-bc622d17a5b4",
      "metadata": {
        "id": "67dced06-8dcb-4bde-baf4-bc622d17a5b4"
      },
      "source": [
        "### Logistic Regression"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3c4fef99-7d9d-428a-a72c-d9403271711a",
      "metadata": {
        "id": "3c4fef99-7d9d-428a-a72c-d9403271711a",
        "outputId": "ff56eed0-a291-4cac-9f23-03751dbd43a2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Required time for Logistic Regression prediction with TFIDF+USE :-  0.08313466599975072\n"
          ]
        }
      ],
      "source": [
        "start = timer()\n",
        "y_pred_lr_tfidf_use, accuracy_lr_tfidf_use, precision_lr_tfidf_use, recall_lr_tfidf_use, f1_lr_tfidf_use, report_lr_tfidf_use, cm_lr_tfidf_use = evaluate_model(lr_tfidf_use, xtest_tfidf_use_combined, ytest)\n",
        "print('Required time for Logistic Regression prediction with TFIDF+USE :- ', timer() - start)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "f53793f7-9922-4c3d-91de-042cedc8f807",
      "metadata": {
        "id": "f53793f7-9922-4c3d-91de-042cedc8f807"
      },
      "source": [
        "#### Print actual vs. predicted results for Logistic Regression with TFIDF + USE"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "17846db8-46d3-48f2-8b46-0052203605d7",
      "metadata": {
        "id": "17846db8-46d3-48f2-8b46-0052203605d7",
        "outputId": "b657d310-3da2-4a94-a554-c9f95ce5987f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0 = negative, 1 = positive\n",
            "Actual: 0, LR with TFIDF+USE embedding Predicted: 0\n",
            "\n",
            "Actual: 0, LR with TFIDF+USE embedding Predicted: 0\n",
            "\n",
            "Actual: 2, LR with TFIDF+USE embedding Predicted: 2\n",
            "\n",
            "Actual: 0, LR with TFIDF+USE embedding Predicted: 0\n",
            "\n",
            "Actual: 1, LR with TFIDF+USE embedding Predicted: 0\n",
            "\n",
            "Actual: 0, LR with TFIDF+USE embedding Predicted: 0\n",
            "\n",
            "Actual: 0, LR with TFIDF+USE embedding Predicted: 1\n",
            "\n",
            "Actual: 0, LR with TFIDF+USE embedding Predicted: 0\n",
            "\n",
            "Actual: 0, LR with TFIDF+USE embedding Predicted: 0\n",
            "\n",
            "Actual: 2, LR with TFIDF+USE embedding Predicted: 2\n",
            "\n",
            "Actual: 0, LR with TFIDF+USE embedding Predicted: 0\n",
            "\n",
            "Actual: 0, LR with TFIDF+USE embedding Predicted: 0\n",
            "\n",
            "Actual: 0, LR with TFIDF+USE embedding Predicted: 0\n",
            "\n",
            "Actual: 0, LR with TFIDF+USE embedding Predicted: 0\n",
            "\n",
            "Actual: 1, LR with TFIDF+USE embedding Predicted: 0\n",
            "\n"
          ]
        }
      ],
      "source": [
        "print('0 = negative, 1 = positive')\n",
        "for actual, predicted in zip(ytest[:15], y_pred_lr_tfidf_use[:15]):\n",
        "    print(f\"Actual: {actual}, LR with TFIDF+USE embedding Predicted: {predicted}\")\n",
        "    print()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "cad1a480-5284-47de-ba8f-45dcb3e0416e",
      "metadata": {
        "id": "cad1a480-5284-47de-ba8f-45dcb3e0416e",
        "outputId": "27ec0607-7ad4-41ee-839f-3d76d186c14a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Logistic Regression (TFIDF+USE) Accuracy: 0.85\n",
            "Logistic Regression (TFIDF+USE) Precision: 0.83\n",
            "Logistic Regression (TFIDF+USE) Recall: 0.85\n",
            "Logistic Regression (TFIDF+USE) F1 score: 0.82\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.85      0.95      0.89      2154\n",
            "           1       0.54      0.06      0.12       294\n",
            "           2       0.86      0.86      0.86      1282\n",
            "\n",
            "    accuracy                           0.85      3730\n",
            "   macro avg       0.75      0.63      0.62      3730\n",
            "weighted avg       0.83      0.85      0.82      3730\n",
            "\n",
            "Confusion Matrix\n",
            "[[2042    9  103]\n",
            " [ 203   19   72]\n",
            " [ 169    7 1106]]\n"
          ]
        }
      ],
      "source": [
        "print(f\"Logistic Regression (TFIDF+USE) Accuracy: {accuracy_lr_tfidf_use:.2f}\")\n",
        "print(f\"Logistic Regression (TFIDF+USE) Precision: {precision_lr_tfidf_use:.2f}\")\n",
        "print(f\"Logistic Regression (TFIDF+USE) Recall: {recall_lr_tfidf_use:.2f}\")\n",
        "print(f\"Logistic Regression (TFIDF+USE) F1 score: {f1_lr_tfidf_use:.2f}\")\n",
        "print(\"Classification Report:\")\n",
        "print(report_lr_tfidf_use)\n",
        "print(\"Confusion Matrix\")\n",
        "print(cm_lr_tfidf_use)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "efa9795b-8764-4336-ae44-83c3cd311099",
      "metadata": {
        "id": "efa9795b-8764-4336-ae44-83c3cd311099"
      },
      "source": [
        "### XGBoost Classifier"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "10275f78-28d7-4bf9-981e-350ec5f42dcc",
      "metadata": {
        "id": "10275f78-28d7-4bf9-981e-350ec5f42dcc",
        "outputId": "95f701ab-c722-4b2e-c81b-33aaf26b0292",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Required time for XGBoost prediction with TFIDF+USE :-  0.7932596880000347\n"
          ]
        }
      ],
      "source": [
        "start = timer()\n",
        "y_pred_xgb_tfidf_use, accuracy_xgb_tfidf_use, precision_xgb_tfidf_use, recall_xgb_tfidf_use, f1_xgb_tfidf_use, report_xgb_tfidf_use, cm_xgb_tfidf_use = evaluate_model(xgboost_tfidf_use, xtest_tfidf_use_combined, ytest)\n",
        "print('Required time for XGBoost prediction with TFIDF+USE :- ', timer() - start)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "57a77adf-2bfd-4756-a246-a9f5f200ecf7",
      "metadata": {
        "id": "57a77adf-2bfd-4756-a246-a9f5f200ecf7"
      },
      "source": [
        "#### Print actual vs. predicted results for XGBoost with TFIDF + USE"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "5413edb4-5085-4c9a-8ccf-dc354a3764a4",
      "metadata": {
        "id": "5413edb4-5085-4c9a-8ccf-dc354a3764a4",
        "outputId": "b10c2b50-cb94-40e9-ba3b-e0794df8ad9a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0 = negative, 1 = positive\n",
            "Actual: 0, XGBoost with TFIDF+USE embedding Predicted: 0\n",
            "\n",
            "Actual: 0, XGBoost with TFIDF+USE embedding Predicted: 0\n",
            "\n",
            "Actual: 2, XGBoost with TFIDF+USE embedding Predicted: 0\n",
            "\n",
            "Actual: 0, XGBoost with TFIDF+USE embedding Predicted: 0\n",
            "\n",
            "Actual: 1, XGBoost with TFIDF+USE embedding Predicted: 0\n",
            "\n",
            "Actual: 0, XGBoost with TFIDF+USE embedding Predicted: 0\n",
            "\n",
            "Actual: 0, XGBoost with TFIDF+USE embedding Predicted: 0\n",
            "\n",
            "Actual: 0, XGBoost with TFIDF+USE embedding Predicted: 0\n",
            "\n",
            "Actual: 0, XGBoost with TFIDF+USE embedding Predicted: 0\n",
            "\n",
            "Actual: 2, XGBoost with TFIDF+USE embedding Predicted: 2\n",
            "\n",
            "Actual: 0, XGBoost with TFIDF+USE embedding Predicted: 0\n",
            "\n",
            "Actual: 0, XGBoost with TFIDF+USE embedding Predicted: 0\n",
            "\n",
            "Actual: 0, XGBoost with TFIDF+USE embedding Predicted: 0\n",
            "\n",
            "Actual: 0, XGBoost with TFIDF+USE embedding Predicted: 0\n",
            "\n",
            "Actual: 1, XGBoost with TFIDF+USE embedding Predicted: 0\n",
            "\n"
          ]
        }
      ],
      "source": [
        "print('0 = negative, 1 = positive')\n",
        "for actual, predicted in zip(ytest[:15], y_pred_xgb_tfidf_use[:15]):\n",
        "    print(f\"Actual: {actual}, XGBoost with TFIDF+USE embedding Predicted: {predicted}\")\n",
        "    print()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "42650d91-fe30-4f9e-a5b0-c09564749491",
      "metadata": {
        "id": "42650d91-fe30-4f9e-a5b0-c09564749491",
        "outputId": "8cdaee42-d82a-46c7-cf74-cd77149007c3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "XGBoost (TFIDF+USE) Accuracy: 0.84\n",
            "XGBoost (TFIDF+USE) Precision: 0.82\n",
            "XGBoost (TFIDF+USE) Recall: 0.84\n",
            "XGBoost (TFIDF+USE) F1 score: 0.80\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.83      0.95      0.88      2154\n",
            "           1       0.57      0.01      0.03       294\n",
            "           2       0.86      0.84      0.85      1282\n",
            "\n",
            "    accuracy                           0.84      3730\n",
            "   macro avg       0.75      0.60      0.59      3730\n",
            "weighted avg       0.82      0.84      0.80      3730\n",
            "\n",
            "Confusion Matrix:\n",
            "[[2041    2  111]\n",
            " [ 226    4   64]\n",
            " [ 204    1 1077]]\n"
          ]
        }
      ],
      "source": [
        "print(f\"XGBoost (TFIDF+USE) Accuracy: {accuracy_xgb_tfidf_use:.2f}\")\n",
        "print(f\"XGBoost (TFIDF+USE) Precision: {precision_xgb_tfidf_use:.2f}\")\n",
        "print(f\"XGBoost (TFIDF+USE) Recall: {recall_xgb_tfidf_use:.2f}\")\n",
        "print(f\"XGBoost (TFIDF+USE) F1 score: {f1_xgb_tfidf_use:.2f}\")\n",
        "print(\"Classification Report:\")\n",
        "print(report_xgb_tfidf_use)\n",
        "print(\"Confusion Matrix:\")\n",
        "print(cm_xgb_tfidf_use)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "aa69aa30-2ff4-4c02-983d-e7d30bf0148d",
      "metadata": {
        "id": "aa69aa30-2ff4-4c02-983d-e7d30bf0148d"
      },
      "source": [
        "### Random Forest classifier"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b72207a8-49fd-4433-9335-6dc521e76791",
      "metadata": {
        "id": "b72207a8-49fd-4433-9335-6dc521e76791",
        "outputId": "91140eae-69b8-49a8-9b19-1052f4800448",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Required time for Random Forest prediction with TFIDF+USE :-  0.16657082599977002\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
          ]
        }
      ],
      "source": [
        "start = timer()\n",
        "y_pred_rfc_tfidf_use, accuracy_rfc_tfidf_use, precision_rfc_tfidf_use, recall_rfc_tfidf_use, f1_rfc_tfidf_use, report_rfc_tfidf_use, cm_rfc_tfidf_use = evaluate_model(rfc_tfidf_use, xtest_tfidf_use_combined, ytest)\n",
        "print('Required time for Random Forest prediction with TFIDF+USE :- ', timer() - start)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "6df8a34b-ddac-4154-b674-f84008bf373d",
      "metadata": {
        "id": "6df8a34b-ddac-4154-b674-f84008bf373d"
      },
      "source": [
        "#### Print actual vs. predicted results for Random Forest with TFIDF + USE"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e1eba937-e203-440a-bf96-f37f51e3b14c",
      "metadata": {
        "id": "e1eba937-e203-440a-bf96-f37f51e3b14c",
        "outputId": "9771472c-7ee4-4ade-9374-0c3a130c4838",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0 = negative, 1 = positive\n",
            "Actual: 0, RFC with TFIDF+USE embedding Predicted: 0\n",
            "\n",
            "Actual: 0, RFC with TFIDF+USE embedding Predicted: 0\n",
            "\n",
            "Actual: 2, RFC with TFIDF+USE embedding Predicted: 0\n",
            "\n",
            "Actual: 0, RFC with TFIDF+USE embedding Predicted: 0\n",
            "\n",
            "Actual: 1, RFC with TFIDF+USE embedding Predicted: 0\n",
            "\n",
            "Actual: 0, RFC with TFIDF+USE embedding Predicted: 0\n",
            "\n",
            "Actual: 0, RFC with TFIDF+USE embedding Predicted: 0\n",
            "\n",
            "Actual: 0, RFC with TFIDF+USE embedding Predicted: 0\n",
            "\n",
            "Actual: 0, RFC with TFIDF+USE embedding Predicted: 0\n",
            "\n",
            "Actual: 2, RFC with TFIDF+USE embedding Predicted: 2\n",
            "\n",
            "Actual: 0, RFC with TFIDF+USE embedding Predicted: 0\n",
            "\n",
            "Actual: 0, RFC with TFIDF+USE embedding Predicted: 0\n",
            "\n",
            "Actual: 0, RFC with TFIDF+USE embedding Predicted: 0\n",
            "\n",
            "Actual: 0, RFC with TFIDF+USE embedding Predicted: 0\n",
            "\n",
            "Actual: 1, RFC with TFIDF+USE embedding Predicted: 0\n",
            "\n"
          ]
        }
      ],
      "source": [
        "print('0 = negative, 1 = positive')\n",
        "for actual, predicted in zip(ytest[:15], y_pred_rfc_tfidf_use[:15]):\n",
        "    print(f\"Actual: {actual}, RFC with TFIDF+USE embedding Predicted: {predicted}\")\n",
        "    print()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "4eee78c6-2fed-4d25-bdc8-44e87bc20702",
      "metadata": {
        "id": "4eee78c6-2fed-4d25-bdc8-44e87bc20702",
        "outputId": "7c3fbe3b-0b05-47a3-e801-e7eb6e2732eb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Random Forest (TFIDF+USE) Accuracy: 0.77\n",
            "Random Forest (TFIDF+USE) Precision: 0.74\n",
            "Random Forest (TFIDF+USE) Recall: 0.77\n",
            "Random Forest (TFIDF+USE) F1 score: 0.73\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.73      0.99      0.84      2154\n",
            "           1       0.00      0.00      0.00       294\n",
            "           2       0.93      0.60      0.73      1282\n",
            "\n",
            "    accuracy                           0.77      3730\n",
            "   macro avg       0.55      0.53      0.52      3730\n",
            "weighted avg       0.74      0.77      0.73      3730\n",
            "\n",
            "Confusion Matrix:\n",
            "[[2122    0   32]\n",
            " [ 271    0   23]\n",
            " [ 517    0  765]]\n"
          ]
        }
      ],
      "source": [
        "print(f\"Random Forest (TFIDF+USE) Accuracy: {accuracy_rfc_tfidf_use:.2f}\")\n",
        "print(f\"Random Forest (TFIDF+USE) Precision: {precision_rfc_tfidf_use:.2f}\")\n",
        "print(f\"Random Forest (TFIDF+USE) Recall: {recall_rfc_tfidf_use:.2f}\")\n",
        "print(f\"Random Forest (TFIDF+USE) F1 score: {f1_rfc_tfidf_use:.2f}\")\n",
        "print(\"Classification Report:\")\n",
        "print(report_rfc_tfidf_use)\n",
        "print(\"Confusion Matrix:\")\n",
        "print(cm_rfc_tfidf_use)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "cb06d7db-08f2-47a3-9726-2d40a989d50a",
      "metadata": {
        "id": "cb06d7db-08f2-47a3-9726-2d40a989d50a"
      },
      "source": [
        "### Visualization"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6e41982b-c09b-4e55-811c-eb522ca0edfa",
      "metadata": {
        "id": "6e41982b-c09b-4e55-811c-eb522ca0edfa",
        "outputId": "35b89ab1-ae63-4f07-881b-ab618a0593c3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 560
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA90AAAJOCAYAAACqS2TfAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAd8hJREFUeJzt3XmcTvX///HnNcPsi7GMsUzGOvaxRXYVRklUZIuhkC3LRFIYSygVSrJl6VNkInx8IpEla8oysk52JUOyjH2Yef/+8Jvr6zIzmDHHmPG4327Xra73eZ9zXue4rmuu53XOeR+bMcYIAAAAAACkO6eMLgAAAAAAgKyK0A0AAAAAgEUI3QAAAAAAWITQDQAAAACARQjdAAAAAABYhNANAAAAAIBFCN0AAAAAAFiE0A0AAAAAgEUI3QAAAAAAWITQDQBpEBQUpA4dOmTY+jt06KCgoCCHtosXL6pTp04KCAiQzWZTnz59dOTIEdlsNs2aNStD6nwUZaZ9ntzr6E59vby8rC3oNsm9z/bv36+GDRvK19dXNptNixYtkiT99ttvqlGjhjw9PWWz2RQVFfVAa80K6tWrp7Jlyz6QddlsNg0dOvSu/YYOHSqbzebQltGfvwCQWoRuALjFwYMH9frrr6tIkSJyc3OTj4+PatasqU8++URXrlzJ6PLuaNSoUZo1a5a6deumr776Su3atcuwWvbu3SubzSY3NzedO3cuw+pA6ly+fFlDhw7VmjVr0n3Z9erVk81mk81mk5OTk3x8fBQcHKx27dppxYoV97ycsLAw7dy5UyNHjtRXX32lKlWq6Pr162rRooXOnDmjcePG6auvvlKhQoXSfRvSQ2r38Zo1a+z7LbnH3LlzrS0YAHDfsmV0AQDwsFiyZIlatGghV1dXtW/fXmXLllVcXJzWr1+v/v37a/fu3Zo6dWpGlylJmjZtmhISEhzaVq1apSeeeEIRERH2NmOMrly5ouzZsz/Q+r7++msFBATo7Nmzmj9/vjp16vRA15+RChUqlCH7PC1ufx1dvnxZw4YNk3QzJKe3ggULavTo0ZKkS5cu6cCBA1qwYIG+/vprvfzyy/r6668d9lt0dLScnP7v+MCVK1e0adMmvfvuu+rZs6e9fd++fTp69KimTZv20L/W0rqPe/XqpccffzxJe/Xq1dOrtEzj9tcFADzsCN0AIOnw4cNq1aqVChUqpFWrVilfvnz2aT169NCBAwe0ZMmSDKzQUXKB7tSpUypdurRDW+LR5vRy6dIleXp63rGPMUZz5sxRmzZtdPjwYc2ePfuhDUL3sj2pld773EoP+ocBX19fvfLKKw5t77//vnr16qXPP/9cQUFB+uCDD+zTXF1dHfr+888/kqQcOXI4tJ86dSrZ9vthxWvjftSuXVvNmzfP6DIeCre/LgDgYcfPhAAgacyYMbp48aKmT5/uELgTFStWTL17905x/jNnzqhfv34qV66cvLy85OPjo2eeeUY7duxI0nfChAkqU6aMPDw85OfnpypVqmjOnDn26RcuXFCfPn0UFBQkV1dX+fv7q0GDBtq2bZu9z63X4iaefnr48GEtWbLEftrpkSNHUry+eN++fWrevLly5swpNzc3ValSRYsXL3boM2vWLNlsNv3888/q3r27/P39VbBgwbvuyw0bNujIkSNq1aqVWrVqpbVr1+qvv/5K0i8hIUGffPKJypUrJzc3N+XJk0eNGjXSli1bHPp9/fXXqlq1qn1/1alTR8uXL7dPT+na0Nuv+7zT9hw9elTdu3dXcHCw3N3dlStXLrVo0UJHjhxJstxz586pb9++9n+fggULqn379jp9+rSklK/pvpd9fv36dQ0bNkzFixeXm5ubcuXKpVq1at3x9Otz587J2dlZn376qb3t9OnTcnJyUq5cuWSMsbd369ZNAQEB9ue3vo6OHDmiPHnySJKGDRtmfx3dvm+PHz+uZs2aycvLS3ny5FG/fv0UHx+fYn13k1h76dKl9dlnn+n8+fP2abf+Gw4dOtR+ynj//v1ls9ns0+vWrStJatGihWw2m8MR5PR4rf/www+qXbu2PD095e3trcaNG2v37t0Oy0i85v1O++de93Fa2Ww29ezZU/PmzVPp0qXl7u6u6tWra+fOnZKkKVOmqFixYnJzc1O9evWSfX1L0tatW1WjRg25u7urcOHCmjx5cpI+165dU0REhIoVKyZXV1cFBgbqrbfe0rVr15L069u3r/LkySNvb289//zzyX4eSNL69ev1+OOPy83NTUWLFtWUKVOS7ZfSe3vDhg0KDw9Xnjx55OnpqRdeeMH+Q02ihIQEDR06VPnz55eHh4eefPJJ7dmzJ8ky0/JeBICUcKQbACT973//U5EiRVSjRo00zX/o0CEtWrRILVq0UOHChXXy5ElNmTJFdevW1Z49e5Q/f35JN0/n7dWrl5o3b67evXvr6tWr+v3337V582a1adNGktS1a1fNnz9fPXv2VOnSpfXvv/9q/fr12rt3rypVqpRk3aVKldJXX32lvn37qmDBgnrzzTclSXny5EnyhVOSdu/erZo1a6pAgQJ6++235enpqW+//VbNmjXTd999pxdeeMGhf/fu3ZUnTx4NGTJEly5duuu+mD17tooWLarHH39cZcuWlYeHh7755hv179/fod9rr72mWbNm6ZlnnlGnTp1048YNrVu3Tr/88ouqVKki6WYwGTp0qGrUqKHhw4fLxcVFmzdv1qpVq9SwYcN7+JdJKrnt+e2337Rx40a1atVKBQsW1JEjRzRp0iTVq1dPe/bskYeHh6Sbg9XVrl1be/fu1auvvqpKlSrp9OnTWrx4sf766y/lzp072XXe6z4fOnSoRo8erU6dOqlq1aqKjY3Vli1btG3bNjVo0CDZZefIkUNly5bV2rVr1atXL0k3w4vNZtOZM2e0Z88elSlTRpK0bt061a5dO9nl5MmTR5MmTVK3bt30wgsv6MUXX5QklS9f3t4nPj5eoaGhqlatmj766CP99NNP+vjjj1W0aFF169Yttf8Uds7OzmrdurUGDx6s9evXq3Hjxkn6vPjii8qRI4f69u2r1q1b69lnn5WXl5fy5s2rAgUKaNSoUfZTsPPmzSspfV7rX331lcLCwhQaGqoPPvhAly9f1qRJk1SrVi1t377dYSC6u+2fe9nHKblw4YL9h51b5cqVy2GgsXXr1mnx4sXq0aOHJGn06NF67rnn9NZbb+nzzz9X9+7ddfbsWY0ZM0avvvqqVq1a5bC8s2fP6tlnn9XLL7+s1q1b69tvv1W3bt3k4uKiV199VdLN4Pr8889r/fr16tKli0qVKqWdO3dq3Lhx+uOPP+yD20lSp06d9PXXX6tNmzaqUaOGVq1aley/786dO9WwYUPlyZNHQ4cO1Y0bNxQREWH/t7wXb7zxhvz8/BQREaEjR45o/Pjx6tmzpyIjI+19Bg4cqDFjxqhJkyYKDQ3Vjh07FBoaqqtXrzosKy3vRQBIkQGAR9z58+eNJNO0adN7nqdQoUImLCzM/vzq1asmPj7eoc/hw4eNq6urGT58uL2tadOmpkyZMndctq+vr+nRo8cd+4SFhZlChQolqalx48ZJapBkZs6caW97+umnTbly5czVq1ftbQkJCaZGjRqmePHi9raZM2caSaZWrVrmxo0bd6wnUVxcnMmVK5d599137W1t2rQxISEhDv1WrVplJJlevXolWUZCQoIxxpj9+/cbJycn88ILLyTZt4l9jDFGkomIiEiynNv/je60PZcvX04y/6ZNm4wk85///MfeNmTIECPJLFiwIMW672efh4SEJPk3vBc9evQwefPmtT8PDw83derUMf7+/mbSpEnGGGP+/fdfY7PZzCeffGLvd/vr6J9//klxf4aFhRlJDq9nY4ypWLGiqVy58l1rrFu37h1f+wsXLjSSHOq7/d8wcd9++OGHDvOuXr3aSDLz5s1zaL/f1/qFCxdMjhw5TOfOnR2WGxMTY3x9fR3a73X/3GkfJydx21J6nDhxwt5XknF1dTWHDx+2t02ZMsVIMgEBASY2NtbePnDgQCPJoW/dunWNJPPxxx/b265du2YqVKhg/P39TVxcnDHGmK+++so4OTmZdevWOdQ6efJkI8ls2LDBGGNMVFSUkWS6d+/u0K9NmzZJ9kGzZs2Mm5ubOXr0qL1tz549xtnZ2dz+dTWl93b9+vUdPhv69u1rnJ2dzblz54wxN//dsmXLZpo1a+awvKFDhxpJDstM63sRAJLD6eUAHnmxsbGSJG9v7zQvw9XV1T6wT3x8vP799195eXkpODjY4bTwHDly6K+//tJvv/2W4rJy5MihzZs36++//05zPSk5c+aMVq1apZdfftl+5Oz06dP6999/FRoaqv379+v48eMO83Tu3FnOzs73tPwffvhB//77r1q3bm1va926tXbs2OFwOu53330nm83mMOhbosSjdosWLVJCQoKGDBmSZNCk228hlBrJbY+7u7v9/69fv65///1XxYoVU44cORz+/b777juFhIQkOUJ6p5pSs89z5Mih3bt3a//+/anaptq1a+vkyZOKjo6WdPNoZ506dVS7dm2tW7dO0s2j38aYFI9036uuXbsmWfehQ4fua5mS7Lcju3Dhwn0vS0qf1/qKFSt07tw5tW7d2j7/6dOn5ezsrGrVqmn16tVJ1mvV/hkyZIhWrFiR5JEzZ06Hfk8//bTD0fdq1apJkl566SWHz7jE9ttry5Ytm15//XX7cxcXF73++us6deqUtm7dKkmaN2+eSpUqpZIlSzrsl6eeekqS7Ptl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+zFx4kTVqlVL5cqVU+fOnVWkSBGdPHlSmzZt0l9//ZXsvcXv5u+//9bq1auTDJiUyNXVVaGhoZo3b54+/fRTPfnkk2rXrp0+/fRT7d+/X40aNVJCQoLWrVunJ598Uj179lSxYsX07rvvasSIEapdu7ZefPFFubq66rffflP+/Pk1evRoSTdvSdS1a1e99NJLatCggXbs2KEff/wxxdt3Jee5557TV199JV9fX5UuXVqbNm3STz/9pFy5cjn069+/v+bPn68WLVro1VdfVeXKlXXmzBktXrxYkydPTvF66Xvd56VLl1a9evVUuXJl5cyZU1u2bLHfPu5uEgN1dHS0Ro0aZW+vU6eOfvjhB7m6uurxxx+/4zLc3d1VunRpRUZGqkSJEsqZM6fKli2b6uvYU3L+/Hl9/fXXkqTLly/rwIEDWrBggQ4ePKhWrVppxIgR6bKeRPf7Wvfx8dGkSZPUrl07VapUSa1atVKePHl07NgxLVmyRDVr1kw2sN1JWvfxunXrktzWSrp5u7F7ueXYvcqfP78++OADHTlyRCVKlFBkZKSioqI0depUZc+eXZLUrl07ffvtt+ratatWr16tmjVrKj4+Xvv27dO3336rH3/8UVWqVFGFChXUunVrff755zp//rxq1KihlStX6sCBA0nWO2zYMC1btky1a9dW9+7ddePGDU2YMEFlypRJt2up8+bNq969e+vjjz/W888/r0aNGmnHjh364YcflDt3boej9vfzXgSAJDJiyHQAeFj98ccfpnPnziYoKMi4uLgYb29vU7NmTTNhwgSH2w4ld8uwN9980+TLl8+4u7ubmjVrmk2bNpm6deuaunXr2vtNmTLF1KlTx+TKlcu4urqaokWLmv79+5vz588bY27enqd///4mJCTEeHt7G09PTxMSEmI+//xzhzrv55Zhxhhz8OBB0759exMQEGCyZ89uChQoYJ577jkzf/58e5/E2/D89ttvd91vH3/8sZFkVq5cmWKfWbNmGUnmv//9rzHGmBs3bpgPP/zQlCxZ0ri4uJg8efKYZ555xmzdutVhvhkzZpiKFSsaV1dX4+fnZ+rWrWtWrFhhnx4fH28GDBhgcufObTw8PExoaKg5cOBAircVSm57zp49azp27Ghy585tvLy8TGhoqNm3b1+SZRhz89ZbPXv2NAUKFDAuLi6mYMGCJiwszJw+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l9SlSxe9++67aVomsg6OdAMAAADA/+fi4qLKlStr5cqV9raEhAStXLlS1atXT3aey5cvy8nJMVo5OztLkowxaVomsg6OdAMAAADALcLDwxUWFqYqVaqoatWqGj9+vC5dumQfebx9+/YqUKCARo8eLUlq0qSJxo4dq4oVK6patWo6cOCABg8erCZNmtjD992WiayL0A0AADIeg4cCeIi0bNlS//zzj4YMGaKYmBhVqFBBy5Ytsw+EduzYMYcj24MGDZLNZtOgQYN0/Phx5cmTR02aNNHIkSPveZnIugjdAAAAAHCbnj17qmfPnslOW7NmjcPzbNmyKSIiQhEREWleJrIurukGAAAAAMAihG4AAAAAACxC6AYAAACAR8zEiRMVFBQkNzc3VatWTb/++muKfevVqyebzZbk0bhxY3uf5KbbbDZ9+OGHD2JzHmqEbgAAAAB4hERGRio8PFwRERHatm2bQkJCFBoaqlOnTiXbf8GCBTpx4oT9sWvXLjk7O6tFixb2PrdOP3HihGbMmCGbzaaXXnrpQW3WQ4vQDQAAAACPkLFjx6pz587q2LGjSpcurcmTJ8vDw0MzZsxItn/OnDkVEBBgf6xYsUIeHh4OofvW6QEBAfrvf/+rJ598UkWKFHlQm/XQyvDQnZrTGiRp/PjxCg4Olru7uwIDA9W3b19dvXr1AVULAAAAAJlXXFyctm7dqvr169vbnJycVL9+fW3atOmeljF9+nS1atVKnp6eyU4/efKklixZotdeey1das7sMjR0p/a0hjlz5ujtt99WRESE9u7dq+nTpysyMlLvvPPOA64cAAAAADKf06dPKz4+Psn9wfPmzauYmJi7zv/rr79q165d6tSpU4p9vvzyS3l7e+vFF1+873qzggwN3ak9rWHjxo2qWbOm2rRpo6CgIDVs2FCtW7e+69FxAAAAAMD9mz59usqVK6eqVaum2GfGjBlq27at3NzcHmBlD68MC91pOa2hRo0a2rp1qz1kHzp0SEuXLtWzzz6b4nquXbum2NhYhwcAAAAAPIpy584tZ2dnnTx50qH95MmTCggIuOO8ly5d0ty5c+942vi6desUHR19xyPhj5psGbXiO53WsG/fvmTnadOmjU6fPq1atWrJGKMbN26oa9eudzy9fPTo0Ro2bFi61g4AAADg4TfMlrVzQISJSPU8Li4uqly5slau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6elp/P39zSuvvGL++ecf+3zz5s0zZcuWtW/f008/bS5evGgiIiKSvKeT+66MtOFINx4K7777rvr166eoqCiVKFFCrVu3th+JPnjwoBo1aqSXXnpJv//+uyIjI7V+/XqHe7tfv35dI0aM0I4dO7Ro0SIdOXJEHTp0SLKet99+W++//7727t2r8uXLJ5keEBCgEydOaO3atSnW+tprr2n//v0OfS5evKj58+c7HOWWJBcXF7Vt21YzZ860t82aNUuvvvrqPe8bZE3Hjx/Xs88+q8cff1w7duzQpEmTNH36dL333nv2PuHh4dqwYYMWL16sFStWaN26ddq2bVuKy/zuu+/sRwj279+vRYsWqVy5cpKkBQsWqGDBgho+fLj91/TkLFmyRC+88IKeffZZbd++XStXrlTVqlXvebtOnTqlhQsXytnZWc7OzpKkdevWqX379urdu7f27NmjKVOmaNasWRo5cqSkm6feNmvWTB4eHtq8ebOmTp3qcLrtrd5++2317t1be/fuVWhoqGbPnq0hQ4Zo5MiR2rt3r0aNGqXBgwfbz0b59NNPtXjxYn377beKjo7W7NmzFRQUdNf9dbuEhAQ1bdpUZ86c0c8//6wVK1bo0KFDatmypUO/gwcPatGiRfr+++/1/fff6+eff072EhM8mt544w2FhISoXbt26tKli4YMGaKQkBBJ0jfffCMvLy9179492XltNluKy42Pj7e/5itVqmRv79Chg7Zs2aLFixdr06ZNMsbo2WeftZ8lsnXrVr388stq1aqVdu7cqaFDh2rw4MH2M7S2bNmiXr16afjw4YqOjtayZctUp04dSdInn3yi6tWrq3PnzvbPlMDAwPveR8CuXbu0ceNGubi42NuuXr2qypUra8mSJdq1a5e6dOmidu3a6ddff3WY98svv5Snp6c2b96sMWPGaPjw4VqxYoWkm5/jL774olxcXLR582ZNnjxZAwYMcJj/0qVLCg0NlZ+fn3777TfNmzdPP/30k8N3TklatWqV/v77b61du1Zjx45VRESEnnvuOfn5+Wnz5s3q2rWrXn/9df31119p2gf38h0hcXtdXFy0YcMGTZ48WefOndNTTz2lihUrasuWLVq2bJlOnjypl19+WdLNSzxbt26tV199VXv37tWaNWv04osvyhijfv366eWXX3Y4+l6jRo001Y9kZHTqR9aTliPdX3zxhX367t27jSSzd+9eY4wxr732munSpYvDMtatW2ecnJzMlStXkl3Hb7/9ZiTZf5lMPNK9aNGiO9Z+48YN06FDByPJBAQEmGbNmpkJEyY4HLEzxpgnnnjChIWF2Z9Pnz7deHh4OBzRSjwiGRUVZby9vc3FixfNzz//bPz9/c3169c50v0IuNN74Z133jHBwcEOR68mTpxovLy8THx8vImNjTXZs2c38+bNs08/d+6c8fDwSPFI98cff2xKlChh4uLikl3n7UdujUl6xKx69eqmbdu297yNM2fONJKMp6en8fDwsP863qtXL3ufp59+2n50OdFXX31l8uXLZ4wx5ocffjDZsmUzJ06csE9P6Uj3+PHjHZZTtGjRJEc7RowYYapXr26MMeaNN94wTz31lMN+TpSa/bV8+XLj7Oxsjh07Zp+e+Fn166+/GmNuHum+/XOgf//+DmfAAHv37jWSTLly5RyOWjVq1MiUL1/eoe/HH39sPD097Y9z584ZYxzfd56ensbJycnh7A9jbh7Rk2Q2bNhgbzt9+rRxd3e3Hw1v06aNadCggcM6+/fvb0qXLm2MMea7774zPj4+KZ6tcfuZN0BahIWFGWdnZ+Pp6WlcXV2NJOPk5GTmz59/x/kaN25s3nzzTfvzunXrmlq1ajn0efzxx82AAQOMMcb8+OOPJlu2bOb48eP26T/88IPD35qpU6caPz8/h7MplyxZYpycnOxnNoWFhZlChQqZ+Ph4e5/g4GBTu3Zt+/MbN24YT09P880339zTdic+mjdvboy5+3eExO299WwAY27+/WvYsKFD259//mkkmejoaLN161YjyRw5ciTFmu70HR5px5FuPBRuPeqceK3zqVOnJEk7duzQrFmz5OXlZX+EhoYqISFBhw8flnTz1/omTZrosccek7e3t+rWrStJSQZzqlKlyh3rcHZ21syZM/XXX39pzJgxKlCggEaNGqUyZco4HBl89dVXNX/+fF24cEGSNGPGDLVo0ULe3t5JlhkSEqLixYtr/vz5mjFjhtq1a6ds2bKldhchi9m7d6+qV6/ucPSqZs2aunjxov766y8dOnRI169fdzjK7Ovrq+Dg4BSX2aJFC125ckVFihRR586dtXDhwmTHLriTqKgoPf3006max9vbW1FRUdqyZYs+/vhjVapUyX4UW7r5Hh4+fLjDezjx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ateurYMHD6pLly6SpIiICHu/oUOH6v3339f48eOVLVs2DR48WHv27NEPP/yg3Llz68CBA7py5UpadiMAAA8NQjcAAA+RAwcOyBijkiVLpmq+QYMG2f8/KChI/fr109y5c+2h+9ixY+rfv799ucWLF7f3P3bsmF566SWVK1dOklSkSJFk1+Hi4iJ/f39JUs6cOR1OO7/VsGHD9PbbbyssLMy+vBEjRuitt95yCN1t2rRRx44dHeqoWLGiqlSpYt8OAAAyO0I3AAAPEWNMmuaLjIzUp59+qoMHD+rixYu6ceOGfHx87NPDw8PVqVMnffXVV6pfv75atGihokWLSpJ69eqlbt26afny5apfv75eeukllS9fPs3bsGPHDm3YsEEjR460t8XHx+vq1au6fPmyPDw8JMkerhN169ZNL730krZt26aGDRuqWbNmqlGjRprrAADgYcA13QAAPESKFy8um82WqsHSNm3apLZt2+rZZ5/V999/r+3bt+vdd99VXFycvc/QoUO1e/duNW7cWKtWrVLp0qW1cOFCSVKnTp106NAhtWvXTjt37lSVKlU0YcKENG/DxYsXNWzYMEVFRdkfO3fu1P79++Xm5mbvd/vp888884yOHj2qvn376u+//9bTTz+tfv36pbkOAAAeBoRuAAAeIjlz5lRoaKgmTpyoS5cuJZl+6/2yE23cuFGFChXSu+++qypVqqh48eI6evRokn4lSpRQ3759tXz5cr344osOg5QFBgaqa9euWrBggd58801NmzYtzdtQqVIlRUdHq1ixYkkeTk53/uqRJ08ehYWF6euvv9b48eM1derUNNcBAMDDgNPLAQB4yEycOFE1a9ZU1apVNXz4cJUvX143btzQihUrNGnSJO3du9ehf/HixXXs2DHNnTtXjz/+uJYsWWI/ii1JV65cUf/+/dW8eXMVLlxYf/31l3777Te99NJLkqQ+ffromWeeUYkSJXT27FmtXr1apUqVSnP9Q4YM0XPPPafHHntMzZs3l5OTk3bs2KFdu3bpvffeu+N8lStXVpkyZXTt2jV9//3391UHAAAPA450AwDwkClSpIi2bdumJ598Um+++abKli2rBg0aaOXKlZo0aVKS/s8//7z69u2rnj17qkKFCtq4caMGDx5sn+7s7Kx///1X7du3V4kSJfTyyy/rmWee0bBhwyTdvN66R48eKlWqlBo1aqQSJUro888/T3P9oaGh+v7777V8+XI9/vjjeuKJJzRu3DgVKlTojvO5uLho4MCBKl++vOrUqSNnZ2fNnTs3zXUAAPAwsJm0jtgCAAAAAADuiCPdAAAAAABYhNANAAAAAIBFCN0AAAAAAFiE0A0AAAAAgEUI3QAAAAAAWITQDQAAAACARQjdAAAAAABYhNANAAAAAIBFCN0AAAAAAFiE0A0AAAAAgEUI3QAAAAAAWITQDQAAAACARf4fFngxqRox/nsAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Define the classifiers and their corresponding accuracies\n",
        "classifiers = [\"Linear SVM\", \"Logistic Regression\", \"XGBoost\", \"Random Forest\"]\n",
        "tfidf_accuracies = [accuracy_svm, accuracy_lr, accuracy_xgboost, accuracy_rfc]  # Replace with actual accuracy values\n",
        "use_accuracies = [accuracy_svm_use, accuracy_lr_use, accuracy_xgboost_use, accuracy_rfc_use]  # Replace with actual accuracy values\n",
        "tfidf_use_accuracies = [accuracy_svm_tfidf_use, accuracy_lr_tfidf_use, accuracy_xgb_tfidf_use, accuracy_rfc_tfidf_use]  # Replace with actual accuracy values\n",
        "\n",
        "# Create an index for the x-axis\n",
        "x = np.arange(len(classifiers))\n",
        "\n",
        "# Set the width of the bars\n",
        "bar_width = 0.25\n",
        "\n",
        "# Create a grouped bar chart\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.bar(x - bar_width, tfidf_accuracies, bar_width, label='TF-IDF', color='orange')\n",
        "plt.bar(x, use_accuracies, bar_width, label='USE', color='purple')\n",
        "plt.bar(x + bar_width, tfidf_use_accuracies, bar_width, label='TF-IDF+USE', color='red')\n",
        "\n",
        "# Set labels, title, and legend\n",
        "plt.xlabel('Classifiers')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.title('Classifier Accuracies with Different Embeddings')\n",
        "plt.xticks(x, classifiers)\n",
        "plt.ylim(0, 1.0)\n",
        "plt.legend()\n",
        "\n",
        "# Add accuracy values on top of the bars\n",
        "for i in range(len(classifiers)):\n",
        "    plt.text(x[i] - bar_width, tfidf_accuracies[i] + 0.02, f\"{tfidf_accuracies[i]:.2f}\", ha='center')\n",
        "    plt.text(x[i], use_accuracies[i] + 0.02, f\"{use_accuracies[i]:.2f}\", ha='center')\n",
        "    plt.text(x[i] + bar_width, tfidf_use_accuracies[i] + 0.02, f\"{tfidf_use_accuracies[i]:.2f}\", ha='center')\n",
        "\n",
        "\n",
        "# Display the plot\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "4abcd9d7-6bd7-4437-affb-b5fc9da3c16c",
      "metadata": {
        "id": "4abcd9d7-6bd7-4437-affb-b5fc9da3c16c"
      },
      "source": [
        "#### Conclusion: If you see above visualization, as compared to TF-IDF embedding, USE as well as TF-IDF+USE embeddings works better for sentiment analysis on IMDB dataset with different classifiers"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c49df456-a282-40c4-ba25-34d7c2c6e358",
      "metadata": {
        "id": "c49df456-a282-40c4-ba25-34d7c2c6e358"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Reference:\n",
        "https://github.com/FarhanaTeli/Sentiment_Analysis_IMDB\n",
        "\n",
        "https://github.com/Wittline/tf-idf"
      ],
      "metadata": {
        "id": "pkmsXesFSFly"
      },
      "id": "pkmsXesFSFly"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.10"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}